<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Geshan's Blog]]></title>
  <link href="http://geshan.com.np/atom.xml" rel="self"/>
  <link href="http://geshan.com.np/"/>
  <updated>2018-10-26T22:52:02+11:00</updated>
  <id>http://geshan.com.np/</id>
  <author>
    <name><![CDATA[Geshan Manandhar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deployment Is Not Release, Let's Use Feature Flags]]></title>
    <link href="http://geshan.com.np/blog/2018/10/deployment-is-not-release/"/>
    <updated>2018-10-26T08:13:05+11:00</updated>
    <id>http://geshan.com.np/blog/2018/10/deployment-is-not-release</id>
    <content type="html"><![CDATA[<p>Breaking down a big feature to epics and stories is always tricky. Then you have sub-stories making the process complicated. If you could deploy the finished task that delivers value to the business it would help. Enter feature flags, using this you can deploy your code to production behind a gate. Code and feature are on production but not fully released to everyone. This post is going to help you adjust your mental model for getting more benefits with feature flags.</p>

<p><img class="center" src="http://geshan.com.np/images/deployment-not-release/flags.jpg" title="Deployment is not Release, lets use feature flags" alt="Deployment is not Release, lets use feature flags">
[Image Source <a href="https://unsplash.com/photos/jCBzW_Q_UGI">Unspalsh</a>]</p>

<!-- more -->


<h2>Why use feature flags?</h2>

<p>Have you ever faced a situation that you need to deploy an epic but it is not possible as it is 80% completed? It is an epic that has to be &ldquo;released&rdquo; all or nothing. That is where the power of feature flag comes into play. You can deploy (not release to everyone) each new value addition to production. The trick here is to put it behind a simple logic like if email ends in @yourcompany.com. You can check a minimal code <a href="https://geshan.com.np/blog/2016/09/how-to-do-a-minimum-viable-feature-switch/">example</a>.</p>

<blockquote><p>You have to separate the technical deployment process from the business process of releasing a new feature.</p></blockquote>

<h2>How to use feature flags?</h2>

<p>Feature switch, feature toggle are some of the other names of feature flags. It can be effortless like if the logged in user&rsquo;s email is in our white-list we show this form. It can even be a feature that shows up when you add a specific cookie with a defined value in the browser. It can be highly orchestrated too with the use of a SAAS for feature flags. <a href="https://launchdarkly.com/">Launch Darkly</a> is a feature flag as a service company. You can use it if you have the time and resource to invest in it.</p>

<p>Any path you take simple or complex the result is you have control over who can access a new feature. The feature is not released to everyone. The difference is how to activate/deactivate a feature flag. It can be as easy as clicking a checkbox or doing another deployment to open up a feature to everyone.</p>

<blockquote><p>My suggestion is to start small, do an if condition in code and start experimenting. If it works well try other ways like a white-list or even a special cookie from the browser.</p></blockquote>

<h2>Advantages of feature flags</h2>

<p>There are many advantages of using feature flags in production. Lets list down a few highlights:</p>

<ol>
<li>Ability to test a feature on production in private with a select group of users.</li>
<li>Ability to easily add or remove users who can use that feature.</li>
<li>The confidence of releasing near bug-free features. Software engineers and QA can test on production even multiple times. Release the feature after bug fixes only when they are confident.</li>
<li>There will be lesser code conflicts. When the task is complete, code changes are merged to the main branch before/after deployment. This also saves some valuable development time.</li>
<li>The benefit of experimenting some things to a white-list of people in production. This can even lead to good feedback and positive changes.</li>
</ol>


<h2>Conclusion</h2>

<p>You can deploy even small tasks to production with a proper use of feature flags. Think about adding value to the customer and deploying often. Test on production and when you are confident release it to everyone. Always remember Deployment != Release. Happy Feature flagging!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Code Your Microservice Like a Monolith, Keep It Maintainable Not Over-engineered]]></title>
    <link href="http://geshan.com.np/blog/2018/10/dont-code-your-microservice-like-a-monolith/"/>
    <updated>2018-10-12T15:54:07+11:00</updated>
    <id>http://geshan.com.np/blog/2018/10/dont-code-your-microservice-like-a-monolith</id>
    <content type="html"><![CDATA[<p>Will you use a gun to kill a fly? The answer is NO. The same thing goes when you want to write a microservice application that is going to be maximum of 10K lines of code. Don&rsquo;t over-engineer it. Ok, you have been writing and maintaining large code bases. Some might be 100K+ lines of code but you need to get over your habits and think differently. This post helps you unravel the mysteries of writing small and maintainable microservices. The suggestions are opinionated but it is in practice in a million dollar business.</p>

<p><img class="center" src="http://geshan.com.np/images/microservice-code/lego.jpg" title="Do not code your microservice like a monolith, keep it maintainable not over-engineered" alt="Do not code your microservice like a monolith, keep it maintainable not over-engineered"></p>

<!-- more -->


<h2>TLDR;</h2>

<blockquote><p>Microservices are small software systems. You can safely ditch MVC. Say no to ORM and also not take the design pattern baggage for microservices. Focus on code performance, readability, and maintainability not some old rules and patterns. Those patterns were made when people were not doing microservices.</p></blockquote>

<h2>Why write microservices in the first place?</h2>

<p>Microservices architecture, in my opinion, is breaking one or more monoliths into multiple smaller systems. These are more maintainable, independently developed and deployed pieces of software based on business functions. These smaller (presumably “micro”) systems should focus on only one business function and do it well. The catch here is &ldquo;micro&rdquo;, these pieces should ideally be under 10K lines of code.</p>

<p>As they are independent it helps the business release features faster. The shipments team is not dependent on the checkout team. Something deployed on the shipments app is never going to break checkout. It becomes very decoupled. The blast radius of each change is controlled. That is the reason for rapid microservice adoption.</p>

<p>Now let&rsquo;s look at the ways you were used to doing things and why it makes less sense in this microservices era.</p>

<h2>Do you need MVC?</h2>

<p>Model-View-Controller, I got introduced to it in 2007 or maybe a bit earlier. Then I used to think it was the silver bullet to all software architecture issues. I don&rsquo;t hold that opinion anymore. Yes, you used to work with Java or PHP and every other framework was MVC based. Now, you don&rsquo;t need to be strict about MVC anymore. Focus on clarity and getting things done.</p>

<p>Use controllers if you want and if it still makes sense. Think like my app gets HTTP request and it has to give back HTTP response. Do think of having a backend API and frontend(s) consuming it. Check the code below, it is surely not MVC:</p>

<script src="https://gist.github.com/geshan/1f76e5ebb3c15fd3c147c6c97420f923.js"></script>


<p>You can see the full app <a href="https://github.com/geshan/currency-api">here</a>. Veify the structure it is not MVC :)</p>

<p>So rather than doing an effort to get precise lines of M-V-C, write tests, implement continuous integration. Add some logs and monitoring to the app. Make the code maintainable, keep it as lean and simple as possible.</p>

<h2>Don&rsquo;t take on the ORM overhead</h2>

<p>Object Relation Mapping (ORM) when I first saw an ORM in action, I said to myself this is one of the best things ever known to programmers. 10+ years later I would be cautious to suggest an ORM to any software engineer. Last year I refactored a full ORM implementation to a raw SQL query way and it made that part of the application perform 20% faster. On top of it, the database transactions were evident and the code was far more readable hence maintainable.</p>

<p>Data mapper or Active record both bring their own opinions, ways of doing things and extra weight. This not only causes performance issues but also code readability suffers. Think of the pre and post hooks/event listener Doctrine has, they work like magic and it is always tricky to understand magic.</p>

<p><img class="center" src="http://geshan.com.np/images/microservice-code/pot-on-head.jpg" title="Do not code your microservice like a monolith, keep it maintainable not over-engineered" alt="Do not code your microservice like a monolith, keep it maintainable not over-engineered"></p>

<p>Just try this, explain how an ORM related insert code works VS how a simple and straightforward INSERT SQL query works to a beginner/junior software engineer. You will already regret using that ORM. Especially in the context of microservices ORM is a clear overhead. The microservice is anticipated to be maximum of 10K lines of code and affect hardly 10 tables so just don&rsquo;t use an ORM, period.</p>

<h2>Design patterns might be a baggage</h2>

<p>I am not saying that you don&rsquo;t need to learn about <a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design patterns</a>. You should know about SOLID, law of Demeter, factory pattern, strategy pattern, singleton, adapter pattern etc. Well, most of these make sense if you do object-oriented programming right? What if you write a microservice in Node JS that is 1k lines of code spread across ~7 files. It does one small slice of the business function. All these patterns become nice to know stuff at that point.</p>

<p>Design Patterns are relevant for a code base that is already big and in the next 6-12 months is going to be bigger, your usual monolith. They can turn out to be &ldquo;extra baggage&rdquo; for a service that is 100s of lines of code now and will become 1000s of lines of code in the next 6-12 months. We never foresee it to be bigger than that because to do that other part we will have another microservice. So keep your microservice code fat free and well tested.</p>

<p><img class="center" src="http://geshan.com.np/images/microservice-code/baggage.jpg" title="Do not code your microservice like a monolith, keep it maintainable not over-engineered" alt="Do not code your microservice like a monolith, keep it maintainable not over-engineered"></p>

<h2>Conclusion</h2>

<p>If you still want to code your microservice like the last monolith you worked on maybe you are doing something wrong. Think of it again, if you go for a day trip you don&rsquo;t pack and carry things like you are going for a 2 weeks vacation. Think of code performance and maintainability, let the data speak for you and break the rules. Happy software engineering!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Use Docker? 3 Reasons From a Development Perspective]]></title>
    <link href="http://geshan.com.np/blog/2018/10/why-use-docker-3-reasons-from-a-development-perspective/"/>
    <updated>2018-10-10T15:29:22+11:00</updated>
    <id>http://geshan.com.np/blog/2018/10/why-use-docker-3-reasons-from-a-development-perspective</id>
    <content type="html"><![CDATA[<p>Docker has been popular in the technology space in the past 5 years is an understatement. It has <a href="https://trends.google.com/trends/explore?date=2013-09-08%202018-10-08&amp;q=%2Fm%2F0wkcjgj">exploded</a> in usage and popularity in half a decade. Containers have taken us by storm. Newer applications without containerization feel like it is missing something. Docker has stood out to be the king in the container arena. This post details the reasons to use Docker for your development environment.</p>

<p><img class="center" src="http://geshan.com.np/images/why-docker/whale.jpg" title="Why use docker? 3 reasons from a development perspective" alt="Why use docker? 3 reasons from a development perspective"></p>

<!-- more -->


<h2>TLDR;</h2>

<blockquote><p>Docker is super useful for development environment because if it runs on your machine, it runs anywhere. It runs on your friend&rsquo;s machine, on staging and also on production. When a new team member starts, s/he runs 3 commands and the app(s) are running. The new team member can be productive from day 1. Finally, a new version of PHP or MYSQL is coming. You can test your app easily with Docker and make it run in the old version with no issues.</p></blockquote>

<h2>Docker Docker Docker</h2>

<p>You can <a href="https://runnable.com/docker/why-use-docker">read</a> all you want about Virtual Machines (VMs) vs Containers. And there is a list of reasons to use Docker in the <a href="https://www.airpair.com/docker/posts/8-proven-real-world-ways-to-use-docker">real-world</a>. This piece discusses why to use Docker for development. If you want to go hands read about using <a href="https://geshan.com.np/blog/2017/05/how-to-use-docker-compose-with-virtual-hosts-and-services-like-db-for-dev-environment/">docker and docker compose</a> for your development environment.</p>

<p>Docker has many advantages but the most important one is the container analogy. That you don&rsquo;t only ship your code but ship the whole OS and all related layers with each deployment in a standard way. It is a complete package containing the right version of OS, the desired version of the language, any external dependencies of your application and your application code. That too in a lightweight, isolated and resource controllable way. This is where docker blows away the VMs.</p>

<p><img class="center" src="http://geshan.com.np/images/why-docker/ship.jpg" title="Why use docker? 3 reasons from a development perspective" alt="Why use docker? 3 reasons from a development perspective"></p>

<h2>Reasons to use Docker for the development environment</h2>

<p>If you have read this far, now let&rsquo;s dive into the reasons you would want to use Docker for your development environment:</p>

<h3>1. Runs on my machine = runs anywhere</h3>

<p>If you have correctly dockerized your app and it runs without problems on your machine, 99% of the times it will run smoothly anywhere. By anywhere it means on your friend&rsquo;s machine, on the staging environment and production too. Given all of them have docker installed and configured correctly your app will run. Using docker also makes the application code cloud provider agnostic. Your application can potentially run on AWS or GCP or Azure without issues.</p>

<h3>2. New team member can be productive from day 1</h3>

<p>Think of this, a new team member joins then s/he spends more than a day to set up the machine with the right OS. Setup the language(s) used in the company add database(s) on top of it. 2-3 days is wasted on just getting the environment setup correctly. Enter docker + docker-compose, the new joiner sets up the OS. Installs docker then runs 3-5 commands, grabs some coffee and magic: your apps(s) are running. The new joiner can contribute with the working code on day 1. Think of all the cost a company can save with this approach. A streamlined docker implementation makes it a reality.</p>

<h3>3. Test app&rsquo;s compatibility with the newer version of language/database</h3>

<p>Picture this, a new version of the language you use just released. Like you were using PHP 5.6 and 7.0 has come out. You don&rsquo;t know how much work will be needed to make your application compatible with the new version of the language. Use docker here, you just need to run two different docker containers one running the current version and another running the newer version. You can even test the app side by side to measure performance. This can apply for any programming language.</p>

<p>The same technique can be used to say test MYSQL version 5.7 and 8.0. You might think there are tools like NVM (Node version manager) or RVM (Ruby version manager) but things like that don&rsquo;t exist for each language. Also, you can just use docker than overloading your local machine.</p>

<h2>Conclusion</h2>

<p>Docker is a boon to both software engineers and DevOps engineers. It makes releasing software much easier as the whole stack is shipped not only the code. Still, to move your production to Docker many things need to be considered. Things like container builder (for instance <a href="https://cloud.google.com/cloud-build/docs/">Google cloud build</a>), container orchestration (like <a href="https://kubernetes.io/">Kubernetes</a>). So before jumping to the container on staging/production be convinced of its benefits on the local development environment. I hope you exploit Docker to extract the most benefit out of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Just Learn a New Language/framework, Implement It as a Running Open Source Project]]></title>
    <link href="http://geshan.com.np/blog/2018/10/dont-just-learn-a-new-language-slash-framework/"/>
    <updated>2018-10-08T15:27:26+11:00</updated>
    <id>http://geshan.com.np/blog/2018/10/dont-just-learn-a-new-language-slash-framework</id>
    <content type="html"><![CDATA[<p>“For the things we have to learn before we can do them, we learn by doing them.” ― Aristotle, The Nicomachean Ethics. Imagine you already read 3 books about cycling. Then someone gave you a cycle and asked to ride it, will you be able to ride it? The simple answer is &ldquo;No&rdquo;. It is not about how much have you read about cycling or how many videos did you watch about it. It is about getting on a cycle, balancing on it, learning the feet, hands and eye co-ordination. Same goes for learning a new tech skill, a new language or framework.</p>

<p><img class="center" src="http://geshan.com.np/images/language-framework-learn/cycle.jpg" title="Dont just learn a new language framework, implement it as a running open source project" alt="Dont just learn a new language framework, implement it as a running open source project"></p>

<!-- more -->


<p>Now if you think how will I do this new project I don&rsquo;t even know language &lsquo;X&rsquo; or framework &lsquo;Y&rsquo; stop complaining. Maybe you are a new starter in tech or coding but you need to know how to learn new things. The best way to learn something new is by doing it. This post will focus on getting some common things right. It will help you get from I want to learn &lsquo;X&rsquo; to I have a project running in &lsquo;X&rsquo;, so follow on. If you are convinced about doing a project to learn something new, open source it. Github is the de facto service to host your open source projects. Then you can leverage lots of services for free. This post will be equally useful for coding new starters as well as experienced software engineers.</p>

<h2>TLDR;</h2>

<blockquote><p>Write a project to learn that language/framework, open source it then leverage services for free. Don&rsquo;t just watch courses, read the docs and then find solutions. Learn by doing. Use git and implement docker in your project. Code correctly add a code quality check service to be aware of the best practices, deploy your project to get a working URL for it.</p></blockquote>

<p><img class="center" src="http://geshan.com.np/images/language-framework-learn/lang-framework-learn.jpg" title="Dont just learn a new language framework, implement it as a running open source project" alt="Dont just learn a new language framework, implement it as a running open source project"></p>

<h2>Don&rsquo;t just watch courses, read the docs and find solutions</h2>

<p>Nowadays, there are a plethora of choices to learn new things. Still, video courses are one of the most popular media. You can learn something new on <a href="https://www.udemy.com">Udemy</a>, <a href="https://www.pluralsight.com/">Pluralsight</a> or even <a href="https://youtube.com">Youtube</a>. Until you learn by doing, watching the videos is only going to help to a certain level. It is better for you to go through the official documentation. For instance, reading the React JS docs is better than only going through a React JS course. You find out the creators&#8217; perspective. The reason behind creating another Javascript framework/library helping you find proper solutions.</p>

<h2>Learn Git to collaborate</h2>

<p>&ldquo;No man is an island&rdquo;, especially in tech you generally don&rsquo;t work alone. You are part of a team. So even when learning something new try to find someone who you can collaborate with. Git is immensely <a href="https://trends.google.com/trends/explore?q=git,svn,mercurial,bazaar">popular</a> compared to any of its competition. It is beneficial when there is more than 1 person writing code for a project. You should learn git by doing, check the Github <a href="https://try.github.io/">tutorial</a>. I would highly recommend the learn by doing section. After you push it to Github anyone can potentially contribute to it.</p>

<h2>Implement docker, get over works on my machine syndrome</h2>

<p>In 2018, if you want to make your application more accessible, use <a href="https://www.docker.com/">Docker</a>. This will also help a lot in increasing contribution for your open source project. Running your project locally with docker compose will be like executing 2 commands. Docker has many advantages. For a beginner, it is a way to make sure your app runs the same way on your machine, your friend&rsquo;s machine. It will also be the same on the server you deploy your app to. As long as it runs on Docker well, you can rest assured it will run without issues on any environment.</p>

<h2>Add code quality check</h2>

<p>Just making it work should not be your priority. Writing quality should also be in your priority. Add code quality checks for the open source project you created for learning. Depending on the language/framework you could choose any service. I would highly recommend <a href="https://codeclimate.com/quality/">Code Climate</a>. Code Climate supports a wide array of languages from Javascript to PHP and from Java/Kotlin to Swift for mobile developers. With the new <a href="https://codeclimate.com/browser-extension/">browser plugin</a>, you get insights about your code in a Github pull request screen. You just connect it once to your Github repo and start seeing your code quality report. You can then better your code quality too. You can have a look at this <a href="https://codeclimate.com/github/geshan/currency-api/src/exchangeRates.js/source">example</a>.</p>

<h2>Deploy your project</h2>

<p>Now you are writing a new project to learn your favorite &lsquo;X&rsquo; or &lsquo;Y&rsquo;. You have written some parts of it, you are collaborating with Git and have the code open source on Github. You have Docker in place and code quality checks run on each push, great! But you can&rsquo;t show it to your friend who is living in a different city/country right? Wrong!</p>

<p>You can use different services to deploy your web application. With a URL you can show it to your friend, a recruiter or anyone who knows the URL. You can deploy it for free to services like <a href="https://www.heroku.com">Heroku</a> or <a href="https://zeit.co/now">Zeit Now</a>.
If you have Dockerized your open source app I would recommend Zeit Now. With the recent <a href="https://zeit.co/github">Github integration</a>, Zeit Now will give a new URL to each pull request. This makes testing a breeze. You can check an example on a demo <a href="https://github.com/geshan/currency-api/pull/9">currency converter API</a> app I wrote.</p>

<h2>Conclusion</h2>

<p>To conclude, learning by doing is the best way to learn a new thing. Your aim should be to not only make it work but do it following the best practices. That is where code quality comes into play. If you can add automated tests and continuous integration it will be icing on the cake for a starter. Wish you all the best for learning by doing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Practical Steps to Land Your First Tech Job]]></title>
    <link href="http://geshan.com.np/blog/2018/09/7-practical-steps-to-land-your-first-tech-job/"/>
    <updated>2018-09-29T15:55:58+10:00</updated>
    <id>http://geshan.com.np/blog/2018/09/7-practical-steps-to-land-your-first-tech-job</id>
    <content type="html"><![CDATA[<p>&ldquo;If you hate your job, take a loan and you will start liking it&rdquo;. I don&rsquo;t remember where I read this but this sounds convincing. Now think of the tech job market worldwide, saying it is growing would be an understatement, it is booming. Still, why don&rsquo;t fresh graduates not get a job when the pass out of universities? Let&rsquo;s have a closer look at this issue and try to help technology students get a job as soon as their course finishes.</p>

<p><img class="center" src="http://geshan.com.np/images/5-steps-first-tech-job/first-tech-job-a.jpg" title="5 practical steps to land your first tech job" alt="5 practical steps to land your first tech job"></p>

<!-- more -->


<h2>TLDR;</h2>

<blockquote><p>Network in person, use recuriter&rsquo;s help, contribute to open source, list companies/roles you want to work in and learn a new tech thing each month to land your first tech job. Bonus but important points, make a killer resume, have a great pet project deployed online to show and start early.</p></blockquote>

<h2>Interesting subject</h2>

<p>Around 11 years back I wrote this blog post &ldquo;<a href="https://geshan.com.np/blog/2007/11/10-web-by-things-technology-student-or/">10 things a tech student must know</a>&rdquo; then 4 years back I did a talk at the college I completed my bachelor&rsquo;s from titled &ldquo;<a href="https://geshan.com.np/blog/2014/08/things-i-wished-i-knew-while-doing-my/">Things I Wished I Knew While Doing My Tech Bachelor / Undergraduate</a>&rdquo;. Again 2 years back and in Nov of 2017 I did another talk with QnA and interaction with the title &ldquo;<a href="https://geshan.com.np/blog/2016/06/career-paths-for-to-be-tech-graduates-slides/">Career Paths for to Be Tech Graduates</a>&rdquo;  at a couple of college in Kathmandu. I also did another talk called &ldquo;<a href="https://geshan.com.np/blog/2017/02/things-i-wished-i-knew-as-a-junior-developer-slides/">Things I wished I knew as a junior developer</a>&rdquo; for a meetup in Feb 2017. This has been an interesting topic for me in the past decade.</p>

<h2>Why don&rsquo;t students get a tech job after the course?</h2>

<p>Let&rsquo;s face this, it is a mix of the education system and the individual student themselves. I studied my undergrad/bachelors in tech in Kathmandu, Nepal and my master in tech too in the Netherlands. Surely, very different education systems and outlook to education. One thing in common is both don&rsquo;t make the student an employment ready product. On the individual side, don&rsquo;t do a course because your friend is doing it. Simple logic, first ask your self where do you see yourself in 5 or 3 years then backtrack your way to reach there.</p>

<h2>How to fix this?</h2>

<p>I am no education expert or anything still I have worked like a decade in tech and in multiple countries by now. One thing is sure, skills and results are the primary and degrees are secondary. Universities/colleges should try to bridge the gap between students and real market needs. Like I don&rsquo;t know of any university that will teach students lets say <code>git</code> that you are going to use each day at work. That doesn&rsquo;t mean what is being taught is wrong :). Yes, I am ranting a bit here.</p>

<p>On the student&rsquo;s side, you need to research what is relevant for the market, learn on your own and brand yourself so that you can sell your skills faster. For instance, if I interview a candidate who has a good tech blog with helpful and regular posts may be even on medium. Your chances of getting hired are up by like ~5% already. Because being able to put your ideas/learning in words is an important skill for a software engineer.</p>

<p><img class="center" src="http://geshan.com.np/images/5-steps-first-tech-job/first-tech-job-b.jpg" title="5 practical steps to land your first tech job" alt="5 practical steps to land your first tech job"></p>

<h2>Lets get to the steps now</h2>

<p>After all my rants tirades lets focus on how you as a tech student can land a job as soon as you finish your degree. Below are the things you need to do to increase your chances to land your first tech job.</p>

<h3>1. In person networking</h3>

<p>Go to at least 1 <a href="meetup.com">meetup</a>/conference/training/events each month and add at least 2 new people on Linked In who can help you find a job. Not to mention message/email them after the meeting to build a relationship. Meetups are a great way to meet up people who you would normally not meet. Depending on the city you are in like if you are in Sydney you could go to a tech meetup each week. If you are in Kathmandu you could catch a meetup each month. Going to a usually free meetup is beneficial in many ways, you learn new things listening to people, you can network&hellip; Don&rsquo;t underestimate the power of meeting people in the flesh.</p>

<p>So you are asking why would this person refer me? Right? The answer is simple <code>Many companies have referral bonus</code>. If they refer you and you get selected, get the job, complete your probation they get a certain sum of money. A win-win situation for all you, the referrer and the company. Email, then call and ask for a coffee meeting is recommended before asking for a job referral. Of course not to mention you should have an amazing CV.</p>

<h3>2. Use recruiter help</h3>

<p>In the starting, it should be you emailing and potentially calling tech recruiters. The idea is simple, it is a recruiter&rsquo;s job to find good candidates for tech roles. So be open tell them you are looking for junior or starting jobs and try to find a match. Probably the recruiter knows a couple of openings where you could actually be a good fit. Depending on the city there are internships, graduate roles which are specifically targeted at fresh grads. You might need to run away from recruiters after you have some years of experience, but that is a different story.</p>

<h3>3. Contribute to open source</h3>

<p>I know many companies which will look at you github profile first then go through your resume. So <code>actions speak louder than words</code>. To begin with, you don&rsquo;t need to start contributing code. You can start with helping on documentation etc. There are lots of ways to give back to open source. <a href="https://hacktoberfest.digitalocean.com/">Hacktoberfest 2018</a> is starting in 2 days make good use of it. So learning git and github becomes a prerequisite for this step. If you are a tech student in their final semester and don&rsquo;t know git = you don&rsquo;t have a very bright future in tech :).</p>

<h3>4. Make a list of companies with probable roles</h3>

<p>If you don&rsquo;t have a target how will you ever achieve it, if you have a target you can have plans to attain it. Make a list of companies and positions/role that you want to work in when you finish your degree. Towards the end of the course if you are not sure to pick backend or frontend or UI/UX or DevOps/SRE or data engineering or DBA or &hellip; sorry but no one can help a confused person ;). If you see yourself as a frontend engineer at say Atlassian you need to work for it. Another handy tip is to keep a spreadsheet of all the jobs you have applied for with dates to do a proper follow-up. It is not easy to get a call for an interview for less experienced candidates so check step 1 referral helps a lot here.</p>

<h3>5. Learn a new tech thing each month</h3>

<p>Now as you have shortlisted companies and roles you want to work for you have obviously read the job descriptions. So you now know what skills the market and/or the company you aim to join is looking for. Start learning it, dedicate some hours each week/weekend and learn it. Best way to learn is to try to build your pet project, it could be anything that excites you. Don&rsquo;t just go through a course on <code>docker</code> and say yes I know docker. Show it running on a project and then you will actually learn it. If you already know 7 out of 10 things the company will need to teach another junior software engineer, your chances of getting the job automatically becomes higher.</p>

<h2>Conclusion</h2>

<p>There are many other general things that you need to be good on like having a clear and impressive 1-page resume, having at least one project that is online. Like, having basic knowledge of a breadth of things and a bit of depth in the area you want to work in,  knowing your skill and going to the right area of tech also helps. You need to do the above steps like 6-9 months before your course ends else doing things in haste and the very end will not help much.</p>

<p>The tech industry needs new people every year worldwide. From the positive angle, tech needs more and more new people. From the other side, your competition is not only in your city but anywhere in your world so your skills and ability to learn sets you apart. Best of luck hunting for your first tech role!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do a Zero Downtime Database (DB) Migration (Schema Change) With a Practical Example]]></title>
    <link href="http://geshan.com.np/blog/2018/05/how-to-do-a-zero-downtime-database-db-migration-schema-change-with-a-practical-example/"/>
    <updated>2018-05-01T04:00:41+10:00</updated>
    <id>http://geshan.com.np/blog/2018/05/how-to-do-a-zero-downtime-database-db-migration-schema-change-with-a-practical-example</id>
    <content type="html"><![CDATA[<p>Database migration on a production database is never simple. Depending on the volume of requests some teams schedule database migration to off hours. You can run your alter statements with zero or minimal downtime following the steps mentioned below with a practical example.</p>

<p><img class="center" src="http://geshan.com.np/images/db-migration/db-migration.png" title="How to do a zero downtime database" alt="How to do a zero downtime database"></p>

<!-- more -->


<h2>Example</h2>

<p>As an example for this post, let&rsquo;s assume you work for an E-commerce company which has both recurring and new customers. You have partners who publicize a discount code valid for a given date range and get a percent of the order&rsquo;s total tracked by their discount code. Below is the schema for the partner and coupon code. Below is the initial schema before any change:</p>

<p><img class="center" src="http://geshan.com.np/images/db-migration/schema-01.png" title="Initial DB schema" alt="Initial DB Schema"></p>

<p>Now the new requirement is to track different commission percent for the new and recurring customer. New and recurring customers are evaluated by a different system/microservice and it is also responsible for commission calculation based on order total which is out of the scope of this focused example.</p>

<p>To do commission tracking by customer type we would decide to add 2 new columns commission_percent_new_customer, commission_percent_recurring_customer, the difficult question is how to roll it out without downtime.</p>

<p><img class="center" src="http://geshan.com.np/images/db-migration/schema-02.png" title="Updated schema with 2 new columns" alt="Updated schema with 2 new columns"></p>

<h3>Migration script (DB schema alter statement)</h3>

<p>The following migration script will update the DB schema to be in the above state for MYSQL DB:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE `partner_discount_code` ADD `commission_percent_new_customer` DECIMAL NULL AFTER `commission_percent`,
</span><span class='line'>ADD `commission_percent_recurring_customer` DECIMAL NULL AFTER `commission_percent_new_customer`, 
</span><span class='line'>,algorithm=inplace,lock=none;</span></code></pre></td></tr></table></div></figure>


<p>Notice the <code>algorithm=inplace,lock=none</code> it is discussed below.</p>

<h2>Evaluating Downtime</h2>

<p>In the above example there can be 2 types of downtime as follows:</p>

<ol>
<li>Tables locked while migration runs</li>
<li>Downtime because of newly introduced columns and code not matching to it</li>
</ol>


<p>For the first downtime issue depending on the database, it can be mitigated to a significant level with executing proper alter SQL statements. For example in MYSQL if <code>,algorithm=inplace, lock=none</code> is suffixed with your alter it will run with 0 to minimum table lock allowing reads and writes while the migration runs. This is especially important when altering tables with millions of rows as the alter can take minutes depending on the structure and data volume of the tables involved.</p>

<p>For the second issue, if db alter and code release is deployed in a specific sequence it can be handled much better. The deployment steps are listed below:</p>

<h2>Deployment Steps</h2>

<ol>
<li>Add the two new columns to the partner_discount_code, let&rsquo;s say the code is in v 1.1 now</li>
<li>Deploy code v 1.2 which adds and edits all 3 columns - commission_percent, commission_percent_new_customer and commission_percent_recurring_customer.</li>
<li>Test that all the things work as expected, even if you need to roll back nothing breaks and it&rsquo;s fully backward compatible</li>
<li>When everything is fine, deploy code v 1.3 that adds or edits only on the 2 new columns</li>
<li>Test it for a day or two, then as per need you can drop the commission_percent column on the partner_discount_code table as it&rsquo;s not used anymore</li>
</ol>


<h3>Final schema after dropping commission_percent column</h3>

<p><img class="center" src="http://geshan.com.np/images/db-migration/schema-03.png" title="Updated schema with 1 column less" alt="Updated schema with 1 column less"></p>

<h2>Things to consider</h2>

<ul>
<li>Always be careful with database migration. It&rsquo;s is surely safe to take a backup of the table you will run the alter statement on before executive it.</li>
<li>Don&rsquo;t deploy the code first that write to new columns then run the migration, it will result in errors as the code will try to access non-existing column(s).</li>
<li>Always think of backward compatibility usually without a revert migration. Generally, access to production database is only given to a select few.</li>
<li>Run drop or rename columns only after you are fully satisfied that the new changes are not breaking anything.</li>
<li>It is better to run migrations (alter SQL) manually than part of the deployment to keep things segregated and more predictable.</li>
</ul>


<h2>Conclusion</h2>

<p>Database migration is not difficult if it is done the right way. Hope this post helps you run your DB migrations in a smoother fashion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert Your Tech Hiring Funnel Into an Hour Glass, Retain Your Tech Talent]]></title>
    <link href="http://geshan.com.np/blog/2017/08/convert-your-tech-hiring-funnel-into-an-hour-glass/"/>
    <updated>2017-08-19T02:52:05+10:00</updated>
    <id>http://geshan.com.np/blog/2017/08/convert-your-tech-hiring-funnel-into-an-hour-glass</id>
    <content type="html"><![CDATA[<p>Sometimes I feel that the software company (<a href="http://younginnovations.com.np/ourstory">YIPL</a>) we started a decade back is turning into a software engineer factory. We take in fresh grads or junior software engineers, train them, mentor them. When they get the skills after 6-9 months and are ready to be productive to the company they move to a bigger better software company. This is a common story in Kathmandu Tech Scene. I am not blaming people moving jobs in tech but I think, there is a fundamental flaw in the process and system itself. In this blog post I will unveil a tech hiring funnel we follow for a few tech startups in Kathmandu. It will also contain some of my thoughts on how to retain tech talent by converting the funnel into an hour glass.</p>

<p><img class="center" src="http://geshan.com.np/images/tech-hiring-funnel-hour-glass/tech-hiring-funnel-hourglass.jpg" title="Convert your tech hiring funnel into an hour glass, retain your tech talent" alt="Convert your tech hiring funnel into an hour glass, retain your tech talent"></p>

<!-- more -->


<p>I am not a hiring manager or recruiter. Below is my own experience of some years trying to source and retain tech talents mainly in Kathmandu, Nepal. I feel, these processes can be applied to any hire many tech roles anywhere in the world.</p>

<h2>Tech Hiring Funnel</h2>

<p>Hiring for tech roles is a difficult job. Like any other team, if one wrong person gets hired in the tech team it can spoil the team spirit of the whole team. So IMHO, it is better to not hire a person if in doubt than to take chance. Once the person is in the team, it will be a lot difficult to take any negative action than not hiring the person in the first place.</p>

<p>To avoid such problems, here is a tech hiring funnel focused on   software engineers:</p>

<ol>
<li>We get the CV or head hunt to receive the CV. Some candidates are filtered out just by the CV.</li>
<li>Then we send in a set of questions over email for software engineers, <a href="http://bit.ly/sw-eng-ques">this</a> one is focused on PHP/JS.

<ol>
<li>This helps filter out some candidates. If the answer is without depth or just googled it is easy to filter out the candidate.</li>
</ol>
</li>
<li>After we are satisfied with the answers we send a coding task/challenge. <a href="http://bit.ly/sw-eng-task">This</a> one is for a PHP back-end software engineer.

<ol>
<li>Always with a deadline which includes a weekend as working candidates need time to do this.</li>
<li>There might be things s/he is doing for the first time in the task, even experienced software engineers have something new in the above task (at least in the case of Software Engineers in Kathmandu).</li>
<li>This helps us filter out lots of people as candidates have big words in their CV but the solution gives us a clear picture of their coding skills.</li>
</ol>
</li>
<li>Depending on the task solution we generally give a score of 1-10 to be objective in the analysis.</li>
<li>Then if the task solution is good enough, there might be a phone interview for initial screening</li>
<li>Then there can be one technical and one management interview or both put together depending on the candidate.</li>
<li>Even after interviews we score on 1-10 to be objective then the decision is to offer or not offer the position to the candidate.</li>
</ol>


<p>The above is the funnel works for majority of tech positions like software engineer (both back-end and front-end), UI/UX engineer, QA engineer, DevOps/SRE engineer etc. Questions and task will vary depending on the role of course. The steps can be changed to match your company rules and policy.</p>

<p>It works well at the 10s scale but I am not sure how good will it will work at the 100s scale.</p>

<h2>The hourglass transformation</h2>

<p>If you spend so much time hiring a good candidate but do not have a great on-boarding procedure you are doing something wrong.  Listen to <a href="https://blog.fogcreek.com/how-to-onboard-software-engineers-interview-with-kate-heddleston/">this</a> amazing podcast/interview with Kate Heddleston to get more idea about tech role on-boarding. After a smooth on-boarding process, I think the following things matter for retaining tech talent:</p>

<ol>
<li>Motivation is always important. Bluntly put &ldquo;money talks&rdquo;. If you are not able to pay your software engineers good money (at least as per market rates) they will look for other opportunities.</li>
<li>Software engineers and generally other tech roles crave for challenges. New things, shiny technology attracts us tech people. So keeping your software stack up to date will help retain tech talent.</li>
<li>Team culture matters a lot. How your team accepts a new member. The culture of mentoring and growth is crucial for software teams.</li>
<li>Visionary leadership is very important. If you are doing the same thing you were doing 5 or even 2 years back there is a problem in the team. Update and upgrade is the need in technology as it moves very fast.</li>
<li>Create an environment to grow. If your junior software engineer can&rsquo;t grow to a software engineer in 1-2 years there is some issue to fix. Servant leadership with opportunity to grow will help retention.</li>
</ol>


<h2>Conclusion</h2>

<p>Every team might not have all the skills it needs. Be open to communicate the skills your team lacks and move forward to build that skill. For instance if your team needs DevOps tool&rsquo;s skills hire a consultant for 3-6 months with a target of getting the most out of the consultant to team 1-3 members of the team those skills.</p>

<blockquote><p>Hopefully, this will help you hire and retain your tech talent better.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adopt a Painless Continuous Delivery Culture, Add More Business Value [Slides]]]></title>
    <link href="http://geshan.com.np/blog/2017/08/adopt-a-painless-continuous-delivery-culture/"/>
    <updated>2017-08-02T13:17:30+10:00</updated>
    <id>http://geshan.com.np/blog/2017/08/adopt-a-painless-continuous-delivery-culture</id>
    <content type="html"><![CDATA[<p>Your work responsibilities boil down to 2 things, either add value to customers or save cost for the business.
Value to the business is always more important than the latest technical fad. If a feature is done (production
ready) but not deployed to production it is an opportunity loss for the business.</p>

<p><img class="center" src="http://geshan.com.np/images/continuous-delivery/geshan-devops--days-pdx-2017.jpg" title="Adopt a painless continuous delivery culture, add more business value [Slides]" alt="Adopt a painless continuous delivery culture, add more business value [Slides]"></p>

<!-- more -->


<p>Below are the slides of my
talk titled &ldquo;Adopt a painless continuous delivery culture, add more business value&rdquo; given today at
<a href="https://www.devopsdays.org/events/2017-portland/program/">DevOpsDays Portland 2017</a>:</p>

<h2>The Slides</h2>

<script async class="speakerdeck-embed" data-id="44a57cc9c1eb4c5a9ba087cea49dac78" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>Slides on <a href="http://bit.ly/cdbv-gm">slideshare</a></p>

<h2>The Video</h2>

<p>The video of the talk is below:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/2oYPAHJwr6U" frameborder="0" allowfullscreen></iframe>


<h2>The Abstract</h2>

<p>A continuous delivery of new features definitely adds value to the business, it should be effortless to the tech team too. 5 years back our sys-admin team was in Istanbul and the dev team was in Dubai. Even then changes were shipped periodically but the process was cumbersome. A stable delivery pipeline with tests, continuous integration and small atomic deployments with github flow gives us a leading-edge. The culture of logging and monitoring ingrained in our team helps us move fast. Now, we ask a chatbot to deploy our microservices several times a day to production. In this session, I will unveil details on how you can get started with a smooth continuous delivery pipeline one step at a time.</p>

<h2>Conclusion</h2>

<p>The first day of DevOps Days PDX 2017 was pretty impressive. Looking forward to day 2!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Companies Tech Competency Matrix]]></title>
    <link href="http://geshan.com.np/blog/2017/06/software-companies-tech-competency-matrix/"/>
    <updated>2017-06-07T22:18:57+10:00</updated>
    <id>http://geshan.com.np/blog/2017/06/software-companies-tech-competency-matrix</id>
    <content type="html"><![CDATA[<p>Every company is a <a href="https://www.forbes.com/sites/forbestechcouncil/2017/01/23/why-every-company-is-a-technology-company/#62d4503657ae">technology company</a>. A technology company without great software and technical team is insignificant. In this post I will unfold my understanding of what makes a tech team competent in 4 levels with 6 main criteria and 25 sub criteria.</p>

<p><img class="center" src="http://geshan.com.np/images/swtcm/swtcm.jpg" title="Software Companies Tech Competency Matrix" alt="Software Companies Tech Competency Matrix"></p>

<!-- more -->


<h2>Assumptions</h2>

<p>Below are some of the assumptions I have made for this opinionated matrix:</p>

<ul>
<li>It focuses on a tech/engineering team doing software development.</li>
<li>It tilts towards software teams practicing agile methodologies.</li>
<li>It is more targeted towards web applications/APIs developing teams.</li>
<li>Many things can be added to the 6 main criteria and 25 sub criteria, still these 25 points I think are important.</li>
<li>Many things are dependent on the scale your team works at, for example if you get 2 requests per minute you don&rsquo;t need a load-balancer :)</li>
</ul>


<h2>The matrix</h2>

<p>If its difficult to read jump directly to the <a href="https://docs.google.com/spreadsheets/d/1uDx5RG8k7Oxl6REGPgZIG-qqCNfn3E8WwczPPyoWvSA/edit?usp=sharing">google sheet</a>.</p>

<iframe src="https://docs.google.com/spreadsheets/d/1uDx5RG8k7Oxl6REGPgZIG-qqCNfn3E8WwczPPyoWvSA/pubhtml?gid=0&amp;single=true&amp;widget=false&amp;headers=false" width="750px" height="1000px"></iframe>


<h2>Add more things</h2>

<p>If you want to add more things check this <a href="https://docs.google.com/spreadsheets/d/1uDx5RG8k7Oxl6REGPgZIG-qqCNfn3E8WwczPPyoWvSA/edit?usp=sharing">google sheet</a> and comment below.</p>

<p>Thanks the the people who helped me review this and for their valuable inputs. And thanks Sijin Joseph for the <a href="http://sijinjoseph.com/programmer-competency-matrix/">programmer competency matrix</a> from where I got the idea to
make such kind a matrix on a team level then individual programmer.</p>

<h2>Conclusion</h2>

<p>As a company evaluates any programmer, you could try to rate your team or processes giving them a point as per the level in each of the 25 criteria.
So any team could score between 25-100 (25 is level 1 on each point and 100 is level 4 in each point). It should be an interesting exercise, <a href="https://docs.google.com/spreadsheets/d/1nenLo3uV3xN0PBt-heg0HLogLgHKw32QFeF4wj6Hdqs/edit?usp=sharing">here</a> is an example.</p>

<blockquote><p>Hopefully you know where your tech competency/maturity stands on a team level better now.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Docker Compose With Virtual Hosts and Shared Services (Like Db) for Dev Environment]]></title>
    <link href="http://geshan.com.np/blog/2017/05/how-to-use-docker-compose-with-virtual-hosts-and-services-like-db-for-dev-environment/"/>
    <updated>2017-05-25T00:53:04+10:00</updated>
    <id>http://geshan.com.np/blog/2017/05/how-to-use-docker-compose-with-virtual-hosts-and-services-like-db-for-dev-environment</id>
    <content type="html"><![CDATA[<p>Docker as been immensely popular in the past years. If you are not using docker at least in your dev environment in 2017.
You are surely missing out on some great advantages. Your new software engineer should start writing production-ready code
in a matter of hours not days. All thanks to docker.  Along the same lines, this post will cover how you can set up
docker for your dev environment with least friction and maximum productivity. It is an opinionated post. We migrated to this <code>external_links</code>
<a href="https://docs.docker.com/compose/compose-file/#externallinks">approach</a> so that we could run multiple projects/microservices that use the same db/services shared among them.</p>

<p><img class="center" src="http://geshan.com.np/images/docker-compose-vhost/docker-compose-vhost.jpg" title="Docker compose with vhost and shared services" alt="Docker compose with vhost and shared services"></p>

<!-- more -->


<h2>Context</h2>

<ul>
<li>This tutorial is generally agnostic of docker and docker-compose versions (I am using docker compose 1 syntax). I assume you have docker and docker-compose installed and know about them.</li>
<li>It uses external images like Nginx proxy for virtual host per project. Mysql db as shared external service. It could also have been mongo or redis or even rabbit mq. The main point is to use it as <code>external_link</code> in the docker compose file, so that it can be shared among projects.</li>
<li>It uses a demo app which emulates the page visit/hit counter popular decades back with a <a href="https://github.com/geshan/counter/blob/master/index.js">~30 liner Nodejs app</a> and Mysql db.</li>
<li>I would like to keep the description as concise as possible and in points to make it simple and clear. You should read the code of <a href="https://github.com/geshan/counter">sample counter project</a> and sample mysql container&rsquo;s <a href="https://github.com/geshan/sample-mysql/blob/master/docker-compose.yml">docker-compose.yml</a> well.</li>
<li>The goal is to grasp the concepts well and apply it to your current project. For example, you could start with replacing your local mysql install with a docker container.</li>
</ul>


<h2>Problems to solve</h2>

<ol>
<li>After I use docker and docker compose, the web server (nginx/apache etc) of project A takes up port 80 and I can&rsquo;t run project B on port 80 or have a virtual host for both projects.</li>
<li>When I use my db (mysql/postgres) as a service in my docker compose for project A, It is cumbersome to use the same db for another project as its coupled with project A.</li>
<li>I just want to run my mysql database, import some data and run some queries. I don&rsquo;t want to run my app for now.</li>
</ol>


<h2>Solution goals</h2>

<ol>
<li>To make services like db etc independent of projects and shared among projects similar to having a local install of mysql with multiple databases.</li>
<li>Multiple projects should be able to run in parallel and each of them will have their own virtual host for easy accessibility.</li>
</ol>


<h2>Steps</h2>

<ol>
<li>Run the Nginx proxy to enable virtual hosts with <code>$ docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy</code></li>
<li>Add <code>127.0.0.1 counter.local.dev</code> to your hosts file (on unix based system it is <code>/etc/hosts</code> file)</li>
<li>Create an empty folder db in your home (<code>~/db</code>), to save your mysql data</li>
<li>Clone mysql repo from <a href="https://github.com/geshan/sample-mysql">here</a> maybe at <code>~/projects/mysql</code></li>
<li>In <code>~/projects/mysql</code> run docker-compose up to run mysql, it will create <a href="https://github.com/geshan/sample-mysql/blob/master/init-dump/counter.sql">counter db, counts table with one row</a>.</li>
<li>Clone the sample counter app from <a href="https://github.com/geshan/counter">here</a> to maybe <code>~/projects/counter</code>.</li>
<li>In <code>~/projects/counter</code> run <code>docker-compose up</code></li>
<li>Then go to <code>http://counter.local.dev</code> on your browser you should see <code>Page visited 1 times</code>, refresh it, it should say <code>Page visited 2 times</code></li>
</ol>


<p><img class="center" src="http://geshan.com.np/images/docker-compose-vhost/page-visited.png" title="All working you should see this" alt="All working you should see this"></p>

<p>Virtual host has been possible in above setup as we ran the nginx proxy and configured <code>VIRTUAL_HOST</code> and <code>VIRTUAL_PORT</code> parameters correctly
in the docker-compose.yml of the sample counter project. Mysql was already running before the project even started to run and it was <code>external_links</code>,
the IP of the mysql container was automatically added to the <code>/etc/hosts</code> of the counter project container which enabled us to use the host for mysql db
as <a href="https://github.com/geshan/counter/blob/master/index.js#L4">mysql</a> in the connection config we passed to the mysql library.</p>

<p>Steps for running dependent services like nginx proxy, mysql can surely be automated for speed and efficiency.</p>

<h2>Takeaways</h2>

<ol>
<li>You can plan a step by step migration like first get your db/queue migrated from local install to docker then the app.</li>
<li>Use <code>external_links</code> for all the services like db/queue/redis/solr anything that needs to be shared among projects.</li>
<li>Use <a href="https://github.com/jwilder/nginx-proxy">nginx proxy</a> to enable virtual host per project with two simple env variables <code>VIRTUAL_HOST</code> and <code>VIRTUAL_PORT</code> in the project&rsquo;s <a href="https://github.com/geshan/counter/blob/master/docker-compose.yml#L8-L9">docker-compose</a> file. <code>VIRTUAL_PORT</code> is 8080 because application is <a href="https://github.com/geshan/counter/blob/master/index.js#L27">running</a> on port 8080 and same port is exposed from the <a href="https://github.com/geshan/counter/blob/master/Dockerfile#L10">dockerfile</a>.</li>
<li>Run all your dependencies before hand and then run <code>docker-compose up</code> on your project(s). Dependencies can be run with <code>docker-compose up -d</code> to put it in the background. You can use <code>docker-compose -f logs</code> to follow logs and check if the service is running fine.</li>
<li>In this way, you can run multiple projects sharing the same db instance and each project can have its own virtual host.</li>
</ol>


<blockquote><p>Hope you found this helpful. For more clarity, please read the <a href="https://github.com/geshan/counter/blob/master/Dockerfile">Dockerfile</a>, <a href="https://github.com/geshan/counter/blob/master/docker-compose.yml">docker-compose.yml</a> and <a href="https://github.com/geshan/counter/blob/master/index.js">index.js</a> of the sample counter project thoroughly.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I Wished I Knew as a Junior Developer for Developers Nepal Meetup #4 [Slides and Video]]]></title>
    <link href="http://geshan.com.np/blog/2017/02/things-i-wished-i-knew-as-a-junior-developer-slides/"/>
    <updated>2017-02-08T14:31:35+11:00</updated>
    <id>http://geshan.com.np/blog/2017/02/things-i-wished-i-knew-as-a-junior-developer-slides</id>
    <content type="html"><![CDATA[<p>Being a senior software developer is more about the mindset and pro-activeness. Technical skills can take you to a point then you will be stagnant. To grow you need to learn in tech field. Above was the context for my talk titled &ldquo;Things I wished I knew as a junior developer&rdquo;.</p>

<p><img class="center" src="http://geshan.com.np/images/things-jr-dev/geshan-dn-meetup-4.jpg" title="Me speaking about Things I wished I knew as a junior developer at DN Meetup 4" alt="Me speaking about Things I wished I knew as a junior developer at DN Meetup 4"></p>

<!-- more -->


<h2>Main points</h2>

<p>It mainly highlights the 10 points below:</p>

<ol>
<li>Solutions and value to business is much more important than the latest language/framework.</li>
<li>Be strong in the basics.</li>
<li>First, solve the problem. Then, write the code. - John Johnson</li>
<li>Writing simple and clear code is more difficult than writing magic code.</li>
<li>Code reviews help both the reviewer and reviewee.</li>
<li>(Automated) Testing is easier than debugging.</li>
<li>Automation is King.</li>
<li>Application logs + monitoring save your sleep.</li>
<li>Non tech things are very important like proactive communication, being on time etc.</li>
<li>You might not need that abstraction - like an ORM.</li>
</ol>


<h2>Slides</h2>

<p>I gave this talk on 4-Feb-2017 for Developers Nepal Meetup #4, the slides are below:</p>

<script async class="speakerdeck-embed" data-id="faca53aa9c854cd682eb08b64ddb168a" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p>You can also view the slides on <a href="http://www.slideshare.net/geshan/things-i-wished-i-knew-as-a-junior-developer">slideshare</a>.</p>

<h2>Video</h2>

<p>The video of the talk is below:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cLokEa545SY" frameborder="0" allowfullscreen></iframe>


<h2>Meetup Report</h2>

<p>There were lots of participants making it a really good opportunity to network.</p>

<p><img class="center" src="http://geshan.com.np/images/things-jr-dev/dn-meetup-4-participants.jpg" title="Participants at DN Meetup 4" alt="Participants at DN Meetup 4"></p>

<p>It was great meetup to attend, speak and moderate the panel discussion.</p>

<p><img class="center" src="http://geshan.com.np/images/things-jr-dev/dn-meetup-4-panelists.jpg" title="Open discussion panelists at DN Meetup 4" alt="Open discussion panelists at DN Meetup 4"></p>

<p>If you are interested more about the meetup you can view the meetup report <a href="https://docs.google.com/document/d/1utAY2UyxNOzBKFbp8cfY4cbz6Np517_fVGO4VCVXdds/">here</a>.</p>

<p>More photos of the meetup can be viewed <a href="https://www.dropbox.com/sh/jeq76wzcaffg1ft/AABcnAJpd3Kk6HiEbt3XjgQ7a?dl=0">here</a>.</p>

<blockquote><p>I hope you learned something new.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Podcasts Every Software Engineer/developer Should Subscribe to - Part 3]]></title>
    <link href="http://geshan.com.np/blog/2017/01/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-3/"/>
    <updated>2017-01-04T16:47:54+11:00</updated>
    <id>http://geshan.com.np/blog/2017/01/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-3</id>
    <content type="html"><![CDATA[<p>Podcasts open up a new horizon for learning, it is easier than reading and you can do it while commuting. This is a part 3 is the series (do check part <a href="http://geshan.com.np/blog/2015/10/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to/">1</a> and
<a href="http://geshan.com.np/blog/2016/05/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-2/">2</a>) of podcasts you must subscribe to and listen to as a software engineer. Same as the last 2 times the 3 podcasts listed below have superb content and amazing sound quality too. Below is the list:</p>

<p><img class="center" src="http://geshan.com.np/images/3-podcasts-part-3/3-podcasts-sw-eng-part-03.jpg" title="3 podcasts every software engineer should subscribe to - part 3" alt="3 podcasts every software engineer should subscribe to - part 3"></p>

<!-- more -->


<h2><a href="http://www.heavybit.com/library/podcasts/to-be-continuous/">To Be Continuous by Heavybit</a></h2>

<p>This is a gem of a podcast. Hosted by Paul and Edith it has the right mix of technical and non-technical content.
Paul is the co-founder of Circle CI and Edith is the co-founder of LaunchDarkly. Together they make a great pair.
They put forward their ideas about continuous delivery and software engineering topics.
Sometimes they even bring in guests which is like a cherry on the cake. The last episode #28 on <a href="http://www.heavybit.com/library/podcasts/to-be-continuous/ep-28-goal-setting/">Goal setting</a> was amazing.</p>

<p><img class="center" src="http://geshan.com.np/images/3-podcasts-part-3/to-be-continuous.jpg" title="To Be Continuous Podcast" alt="To Be Continuous Podcast"></p>

<h2><a href="http://www.gistia.com/techpeople/">Tech People by Gistia Labs</a></h2>

<p>In-depth interviews is what tech people by Gistia Labs podcast excels on. They bring in leaders from the
tech industry to discuss topics from Angular in the enterprise to UX for Lean startup.
The interviews are a bit long, still they are insightful and relay important information.</p>

<p><img class="center" src="http://geshan.com.np/images/3-podcasts-part-3/tech-people.jpg" title="Tech People Podcast" alt="Tech People Podcast"></p>

<h2><a href="https://mixergy.com/interviews/">Mixergy by Andrew</a></h2>

<p>Another admirable podcast is Mixergy hosted by <a href="http://www.andrewwarner.com/">Andrew Warner</a>.
With over a 1000 interviews with proven entrepreneurs, he knows how to ask the right questions.
Andrew sometimes elicits such insightful information out of his guest. It is intriguing how he does it.
If you ever want to learn how to interview people this is one podcast you can&rsquo;t afford do miss.
He generally interviews tech entrepreneurs. The interviews usually last like an hour.
You even as a software engineer get to know important things about how to run a business.</p>

<p><img class="center" src="http://geshan.com.np/images/3-podcasts-part-3/mixergy.jpg" title="Mixergy Podcast" alt="Mixergy Podcast"></p>

<blockquote><p>I hope you had a great start to the new year and continue your learning listening to amazing podcasts. Cheers!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Types of Web Hosting Compared to Types of Housing [Infographics]]]></title>
    <link href="http://geshan.com.np/blog/2016/11/different-types-of-web-hosting-compared-to-types-of-housing/"/>
    <updated>2016-11-29T22:28:50+11:00</updated>
    <id>http://geshan.com.np/blog/2016/11/different-types-of-web-hosting-compared-to-types-of-housing</id>
    <content type="html"><![CDATA[<p>Looking for the right web hosting provider for your website/app idea? It is like finding a housing for yourself. You have to first agree on the type like you want an apartment in a building, your own house/villa or may be a mansion. It will also depend on your budget and what you want to do in your housing. A similar process applies for your web hosting. You can go for a shared host or dedicated host or some cloud Infrastructure As A Service (IAAS ) provider.</p>

<p>In the infographics below I will do a basic comparison between shared host, dedicated host and cloud provider. They are roughly comparable to an apartment, house or a mansion. I am over simplifying things grouping Virtual Private Server (VPS) and dedicated hosting together.</p>

<!-- more -->


<p><img class="center" src="http://geshan.com.np/images/web-host-as-housing/web-host-as-housing-med.png" title="Different types of web hosting compared to types of housing" alt="Different types of web hosting compared to types of housing"></p>

<blockquote><p>I hope this helps you to make the right choice about your hosting provider.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do a Minimum Viable Feature Switch, Includes a Simple Code Example]]></title>
    <link href="http://geshan.com.np/blog/2016/09/how-to-do-a-minimum-viable-feature-switch/"/>
    <updated>2016-09-26T15:55:05+10:00</updated>
    <id>http://geshan.com.np/blog/2016/09/how-to-do-a-minimum-viable-feature-switch</id>
    <content type="html"><![CDATA[<p>Feature switch is a way to switch off or on a feature on a working software during runtime. We can use configuration or condition to achieve this. Feature switch is also known as feature flag, feature toggle and conditional feature. In this post I will reveal why to do <a href="https://en.wikipedia.org/wiki/Feature_toggle">feature switch</a> and how to do it with a simple if condition.</p>

<p><img class="center" src="http://geshan.com.np/images/feature-switch/feature-switch.jpg" title="Minimum viable feature switch, with code example" alt="Minimum viable feature switch, with code example"></p>

<!-- more -->


<h2>Why do a feature switch/flag?</h2>

<p>My first experience with feature flag was when we had to deploy <code>PayPal</code> as a payment method. We wanted to be sure that it works without issues on production. How we did it then was to have a <a href="https://launchdarkly.com/featureflags.html">feature flag</a> with a condition that the user email ends in <code>@namshi.com</code>.</p>

<p>You can do feature switch for various reasons, some of them are:</p>

<ol>
<li>A very important feature needs to go into production and you need to test it in production. It can&rsquo;t be released to everyone unless everything is fine like a new payment method.</li>
<li>You want to deploy a big feature in steps and until the last step is done the feature is not complete.</li>
<li>You want your changes pushed to production and merged with the main branch. But the new changes are not public yet.</li>
<li>You don&rsquo;t want to spend hours fighting merge conflicts. You are working on it for days and your code has not been merged to the main branch.</li>
<li>You want to schedule a feature in future, you could have a feature switch based on date or time.</li>
</ol>


<h2>How to do feature switch?</h2>

<p>There are many ways to do a feature switch for this post as an example I will add a new payment method to a checkout. For this task, I will use a simple <code>if</code> condition. Other ways of doing feature switch can be with a <code>cookie</code> or even some <code>settings in the database</code>.</p>

<h3>Checkout Scenario</h3>

<p>The simple checkout already has 2 payment methods <code>Cash</code> and <code>CreditCard</code>. We will add <code>PayPal</code> to it. The current proof of concept implementation only shows the order total. For, Cash it shows 5 more than credit card as it adds <code>Cash On Delivery (COD)</code> fees.</p>

<p>The code is an addition to my previous post on <a href="http://geshan.com.np/blog/2015/07/getting-started-with-unit-testing-in-laravel/">unit testing with Laravel</a>. If you have not read it, I highly recommend you to do it. This example has <a href="https://github.com/geshan/laravel-unit-test-example/pull/4/files#diff-b3678da71dcc0bd1aa883f9f930c1ca5R34">tests</a> too.</p>

<h3>Checkout Example with PayPal</h3>

<p>Let us take the example of a simple feature switch with adding a new payment method Paypal. It should be accessible only if your email ends in <code>@gmail.com</code>. You should use <code>yourcompany.com</code> email but for an example, I will use <code>gmail.com</code>.</p>

<h3>Example Code</h3>

<p>There is a simple <code>Checkout</code> service that has a <code>calculateTotal</code> method. It calculates the total depending on the payment method and now email.</p>

<script src="https://gist.github.com/geshan/3da1d181ae26f18a0ec365a063aa5d99.js"></script>


<p>The feature flag/switch code is in line 21-23. It checks if the payment method is <code>PayPal</code> and email does not end with <code>@gmail.com</code>. The
<code>endsWith</code> method in Laravel <a href="https://laravel.com/docs/5.3/helpers#method-ends-with">helpers</a> came handy to do it. So <code>PayPal</code> is only available if your email ends in <code>@gmail.com</code>. You can check this <a href="https://github.com/geshan/laravel-unit-test-example/pull/4/files">pull request</a> for full changes and related tests.</p>

<h3>Turn it off</h3>

<p>So let&rsquo;s assume, that you tested <code>PayPal</code> intensively on your production environment. When you are satisfied you just remove the condition and fix the related tests and you are done. Deploy again do a final round of testing and you have <code>PayPal</code> on production, all your customers can use it after that.</p>

<h2>Conclusion</h2>

<p>Stop making big tasks/tickets that take weeks to complete. Apply feature switch and deploy small things. Test them on production without anyone noticing.</p>

<p>Always test critical things on production in a hidden way like a new payment method. Practice feature switch and get your code passed through your work flow to production.</p>

<blockquote><p>Hope you will benefit from feature switch and suggest it to solve complex problems.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Useful Resources and Suggestions for Tech Conference Speakers and Aspiring Speakers]]></title>
    <link href="http://geshan.com.np/blog/2016/09/some-useful-resources-for-conference-speakers-and-wanna-be-speakers/"/>
    <updated>2016-09-14T17:02:38+10:00</updated>
    <id>http://geshan.com.np/blog/2016/09/some-useful-resources-for-conference-speakers-and-wanna-be-speakers</id>
    <content type="html"><![CDATA[<p>I do not consider myself an experienced speaker. I have <a href="http://geshan.com.np/blog/categories/talks/">spoken</a> at a couple of conferences and some meetups in the past years. I have to learn lots of technical and non-technical things to become a better speaker. Still, I would like to share some resources that will help new and experienced speakers.</p>

<p><img class="center" src="http://geshan.com.np/images/speaker-resources/speaker.jpg" title="Some resources for conference speakers" alt="Some resources for conference speakers"></p>

<!-- more -->


<h2>Paper submission is not a lot of work</h2>

<p>Some years back, I thought that submitting a paper to a tech conference was a lot of work. General tech conferences just need you to submit a title and a 200-300 word abstract that&rsquo;s it. The organizers/paper selection committee decides to select or reject the paper on that basis. So just jot down those great abstracts and start submitting the papers.</p>

<p>You will be happy to know that some conferences also cover travel and hotel costs for speakers. So, if you get selected you get a chance to visit a new city/country and speak about a topic you like too.</p>

<h2>How Do I know which conferences have an open CFP</h2>

<p>Now, as you are excited to submit your ideas in the form of papers let&rsquo;s see where you can submit them.</p>

<p><img class="center" src="http://geshan.com.np/images/speaker-resources/cfp.jpg" title="Call for papers for a tech conference" alt="Call for papers for a tech conference"></p>

<p>Below are some of the websites that inform you about Call For Papers (CFP):</p>

<ol>
<li><a href="http://papercall.io/">Papercall.io</a> - You can also submit your papers from this web application. Generally, lists only tech conferences. You can get a weekly update about events listed in PaperCall.io subscribing to <a href="http://theweeklycfp.com/">The Weekly CFP</a>.</li>
<li><a href="http://lanyrd.com/calls/">Lanyrd.com/calls</a> - Lists call for speakers for a lot of events. Events/Conferences are both tech and non-tech.</li>
<li><a href="http://callingallpapers.com/">CallingAllPapers.com</a> - Lists all call for papers with days left marker sorted with a deadline. It has only tech conferences listed.</li>
<li><a href="https://thecfpreport.com/">The CFP Report</a> - Sends a weekly with all tech paper calls. You can even select the day of the week you want the email, I get it each Friday :)</li>
</ol>


<h2>First time speaker? Content is king</h2>

<p>Generally, first-time speakers do not get a chance to speak at conferences. So I recommend you to starts speaking at local meetups. It will be great if you record your talk and publish it as a blog post. This will help you land your first conference speaking opportunity.</p>

<p>Great, so your paper is selected at a tech conference after you already spoke at some meetups. Now after you sort out the administrative procedure like visa if any, you need to focus on your slides. The rule is simple, content is king. No matter you do a soft talk or a super technical talk with lots of code, you need to deliver great content.</p>

<p>Having a agenda or list of things you are going to talk about is a must have. Slides with content in bullets and optimal text on each slide is always better. Images play a vital role if you want to have that punch slide or convey your message in a visual form. I use and recommend right free images that I get from <a href="https://pixabay.com">Pixabay</a> and <a href="https://unsplash.com/">Unsplash</a>.</p>

<h2>Suggestions to speakers, feedback about your talk</h2>

<p>Any feedback about your talk is always helpful. Four general suggestions I have for speakers are:</p>

<ol>
<li>Keep your slides free from any grammatical errors.</li>
<li>While speaking try to avoid any <code>Ahh</code> and <code>umm..</code> etc fillers.</li>
<li>Keep track of your speaking speed, don&rsquo;t speak too fast or too slow.</li>
<li>Speaking is spontaneous. Still, try to memorize your starting and ending quote/sentence. You could even record your start and end sentences, listen to it and improve on it.</li>
</ol>


<p>The best feedback is what your audience tell you. I have got comments and suggestions on the content, the demo code as well as how I speak. It has helped me a lot. One important feedback I got was that on stage I turn myself into a rapper :) (spoke too fast). So, the next talk I gave I was conscious about my speaking pace.</p>

<p>Always try to get face to face feedback one on one with people in the audience. Whenever possible have your talk listed on <a href="https://joind.in">Joind.in</a>. Have a slide towards the end to rate your talk and ask for feedback. Joind.in also has a page to list <a href="https://joind.in/event/callforpapers">call for papers</a></p>

<h2>Conclusion</h2>

<p>Open up, submit your idea in form of a paper to a tech conference. As long as your talk topic is in-line with the conference subjects just go for it. Don&rsquo;t expect your paper to be selected in all the conferences. Tech conferences get a huge number of submissions. Unless you have some solid speaking experience in conferences, it will be difficult. Be in the conference organizer&rsquo;s shoes too. Getting a first-time speaker who won&rsquo;t be able to deliver a great talk to a paying audience is a big risk.</p>

<blockquote><p>Best of luck, hope your paper gets selected at a great tech conference.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#LaraconEU 2016 Was a Great Experience Overall]]></title>
    <link href="http://geshan.com.np/blog/2016/08/number-laraconeu-2016-was-a-great-experience-overall/"/>
    <updated>2016-08-25T13:59:03+10:00</updated>
    <id>http://geshan.com.np/blog/2016/08/number-laraconeu-2016-was-a-great-experience-overall</id>
    <content type="html"><![CDATA[<p>It all started with submitting my chatops talk to some open call for papers in April 2016. After giving the talk in CodeMotion Dubai, I felt chatops is a useful topic. Everyone working in software development can leverage it to make their life easier. My talk was a Laravel centered version of the same talk.</p>

<p><img class="center" src="http://geshan.com.np/images/laracon-eu-2016/laracon-eu.jpg" title="Laracon EU 2016" alt="Laracon EU 2016"></p>

<!-- more -->


<h2>Talk Accepted - Woo hoo!</h2>

<p>My talk got accepted in around mid-May for <a href="https://twitter.com/search?q=%23LaraconEU&amp;src=tyah">#LaraconEu</a> 2016. It was amazing news that entailed other things to take care of. I had to sort out visa first. I want to thank Shawn for keeping like 3 months + time between paper selection and the conference. This is great for speakers like me who have to sort out the paperwork. It is also useful for speakers who get enough time to prepare for their talk.</p>

<blockquote><p>It is something that all conference organizers should  consider when organizing an &ldquo;international&rdquo; conference. Select speakers/talks like 3 months or more in advance.</p></blockquote>

<h3>Suggestions to conference organizers</h3>

<p>Then after I confirmed my presence, I started taking care of the paperwork for the visa. I also had a chat with Shawn over Skype. He gave me some pointers to make the talk more suited to the Laravel Developers audience. It was super handy.</p>

<p>Along the same lines I have 3 more suggestions to conference organizers:</p>

<ol>
<li>Have a conversation with speaker after talk selection. Advise them about content.</li>
<li>Don&rsquo;t always strive for fresh content. The speaker might have presented it earlier. Think of how the speaker can mold it to suit your conference audience.</li>
<li>Be adventurous with speaker selection. I agree it&rsquo;s a risk to select a speaker who needs a visa to be at the conference venue. Still, if you give enough time like ~3 months things generally work out :).</li>
<li>Give speakers with potential a chance, have that trust.</li>
</ol>


<h2>Conference Experience</h2>

<p>Let&rsquo;s fast forward to 22-Aug-2016 now, I arrived in Amsterdam. I am here in Amsterdam after 5 years, still seems like nothing much has changed here :). I can&rsquo;t write anything about the workshops as I did not attend it. The organizers were well prepared. All speakers already had access to the speaker&rsquo;s handbook. The telegram group was useful too.</p>

<p>Most speakers were staying at Park Vitoria Hotel. It is right infornt of Amsterdam Central. 15 mins train ride from the venue and I must tell you its a great hotel to be in.</p>

<h3>Speaker&rsquo;s dinner</h3>

<p>The ice breaking speaker dinner was great. Speakers interacted and got along well with each other. I guess they also changed their selected talks to attend talking with other speakers. I want to thank the organizers of Laracon EU for the effort they put into speaker hospitality.</p>

<p><img class="center" src="http://geshan.com.np/images/laracon-eu-2016/speaker-dinner.jpg" title="On the way to the restaurant for speaker dinner" alt="On the way to the restaurant for speaker dinner"></p>

<h3>Conference Day 1</h3>

<p>Day 1 on 23-Aug-2016 kicked off like half an hour late due to minor technical issues. Taylor Otwell rocked the stage as usual. One thing, I noticed is even a seasoned speaker like Taylor gets a bit nervous before going to stage. So for us rookie speakers it is absolutely  normal to be nervous.</p>

<p><img class="center" src="http://geshan.com.np/images/laracon-eu-2016/taylor-laracon-eu.jpg" title="Taylor Otwell with his keynote at Laracon EU 2016" alt="Taylor Otwell with his keynote at Laracon EU 2016"></p>

<p>Then I attended the talk by Hannes Van De Vreken about IOC Containers. The talk was quite helpful. We took the train together to the venue. Still, I was preparing for my talk that was after lunch.</p>

<p>My turn was next after lunch. Ubuntu wasn&rsquo;t helping much with the huge display that needed 50 Hz refresh rate. After some googling, it played out well without issues.  My talk went pretty smooth and I even got a few questions a the end. I guess I managed my time well.</p>

<p><img class="center" src="http://geshan.com.np/images/laracon-eu-2016/geshan-laracon-eu.jpg" title="Me talking about Chatops at Laracon EU 2016" alt="Me talking about Chatops at Laracon EU 2016">
More pictures from my talk <a href="https://www.facebook.com/media/set/?set=a.10154031202522979.1073741829.625427978&amp;type=1&amp;l=48cf6b4aa3">here</a>.</p>

<p>The slides of my talk are below:</p>

<script async class="speakerdeck-embed" data-id="9df0de20135d458ca8bd818176afbdca" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<p><a href="http://bit.ly/chatops-slides-leu">Slideshare link</a></p>

<p>I wrote a small script to pull in the latest tweet with #LaraconEu for the demo which is <a href="https://github.com/geshan/larabot-hubot">here</a>.</p>

<h2>Video Of My Talk on Chatops</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/SZ3UfwBACIo" frameborder="0" allowfullscreen></iframe>


<p>After that I attended the following talks for the day:</p>

<ol>
<li>How to avoid database migration hell - which was good</li>
<li>Varnish For PHP Developers - that was a bit of too much code still good</li>
<li>One Box Doesn&rsquo;t fit all - by Frank which was a different way at looking at scalability, still, it was a great talk.</li>
</ol>


<h3>Conference Day 2</h3>

<p>I was more relaxed on day 2, I had no talk to do. Then I focused on getting the best out of the day. Below are the talks I attended:</p>

<ol>
<li>Please Understand Me by Matthias Noback - Great talk about the tussle between Mangers and Developers</li>
<li>Lucid Architecture By Abed Halawi - Good concepts and well presented</li>
<li>Building Realtime apps NodeJs way By Sriram - He had too many slides so I was lost mid-way :)</li>
<li>Making the most out of MYSQL By Gabi - A great talk, good content and well presented. The experience of the presenter was visible on stage.</li>
<li>The State of content management By Tihomir - Generally a good talk, as I told to him the contents could be condensed better.</li>
<li>Curing the common Loop By Adam Wathan - Amazing talk a good mix of slides and live coding. Collections seems like the lodash of PHP world.</li>
</ol>


<p><img class="center" src="http://geshan.com.np/images/laracon-eu-2016/adam-laracon-eu.jpg" title="Adam talking about Curing Loops at Laracon EU 2016" alt="Adan talking about Curing Loops at Laracon EU 2016"></p>

<p>For more description of the above talks it&rsquo;s best to have a look at the Laracon EU 2016 <a href="http://laracon.eu/2016/schedule">schedule</a>.</p>

<p>The after party on day 2 was superb too. With live band performing and tech conversations around the atmosphere was electric.</p>

<p>For more photos from the conference do checkout the #LaraconEu tag with <a href="https://twitter.com/search?f=images&amp;vertical=default&amp;q=%23LaraconEU&amp;src=tyah">photos</a>.</p>

<h2>Amazing Experience</h2>

<p>Overall, it was an amazing experience. The venue was great. Organizers put a lot of effort to make sure the speakers felt comfortable. I
want to thank them. The comments I have received over <a href="https://joind.in/talk/9999a">JoinedIn</a> about my talk have been very helpful, I would really like
more ratings and comments :).</p>

<blockquote><p>I am waiting for the videos like everyone else, I have some talks I missed that I want to watch. I loved being a part of such a vibrant event backed by
an amazing community. Cheers!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Career Paths for to Be Tech Graduates [Slides]]]></title>
    <link href="http://geshan.com.np/blog/2016/06/career-paths-for-to-be-tech-graduates-slides/"/>
    <updated>2016-06-28T20:03:05+10:00</updated>
    <id>http://geshan.com.np/blog/2016/06/career-paths-for-to-be-tech-graduates-slides</id>
    <content type="html"><![CDATA[<p>After almost 2 years, I gave another talk to the students of <a href="http://prime.edu.np">Prime College</a>. Last time it was &ldquo;<a href="http://geshan.com.np/blog/2014/08/things-i-wished-i-knew-while-doing-my/">Things I wished I knew while doing my tech bachelors</a>&rdquo;. This time it was <strong>Career Paths for to be tech graduates</strong>. I prepared the slides at 9 and was already presenting the talk at 11:15.</p>

<p><img class="center" src="http://geshan.com.np/images/career-paths-for-tech-grads/cptg-01.jpg" title="Career Paths for tech graduates the talk" alt="Career Paths for tech graduates the talk"></p>

<!-- more -->


<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="d2961b06460a443c8e13535d8add0260" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<h2>Participants</h2>

<p>The students were from <a href="http://www.bsccsit.com/">Bsc. CSIT</a> and <a href="https://en.wikipedia.org/wiki/Bachelor_in_Information_Management">BIM</a> of second and fourth semester. They were high on youth and not worried about their careers. As it was a short talk, I wanted the session to be interactive. I was trying to get more questions out of them. Some of them were shy to ask the questions so they came in later after the talk to have a chat with me.</p>

<p><img class="center" src="http://geshan.com.np/images/career-paths-for-tech-grads/cptg-02.jpg" title="Career Paths for tech graduates the participants" alt="Career Paths for tech graduates the participants"></p>

<h2>Questions</h2>

<p>Questions centered towards roles and problems faced by tech companies in Nepal. I answered the queries with the things I knew and what I had experienced when I was working in Nepal. Few of them were enthusiastic about opening up their own company. I wish them best of luck.</p>

<h2>Conclusion</h2>

<p>Students get serious about internship, job and career only towards their final semesters. I think they should start planning for their internship at the mid of their bachelor study. By the &frac34; stage, they should know which career path should I take.</p>

<blockquote><p>I hope the short talk and QnA session helped some of the participants to think about their career plans.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Developers Nepal Meetup #16 a Round Up and My Talk on Simpilfied Gitflow With Slides]]></title>
    <link href="http://geshan.com.np/blog/2016/06/php-developers-nepal-meetup-number-16-a-round-up-and-my-simpilfied-gitflow-talk/"/>
    <updated>2016-06-25T21:50:35+10:00</updated>
    <id>http://geshan.com.np/blog/2016/06/php-developers-nepal-meetup-number-16-a-round-up-and-my-simpilfied-gitflow-talk</id>
    <content type="html"><![CDATA[<p>I had given a talk in the PHP Developers Nepal meetup #14 in Aug 2014 about <a href="http://geshan.com.np/blog/2014/08/basic-overview-of-message-queues-rabbit/">Rabbit Mq and Symfony</a>.
This time the <a href="http://developers-nepal.github.io/php/meetups/25-Jun-2016/">meetup</a> took place at
Prime College today. There were 2 regular talks for this meetup and one 5 minute lightening
talk about the community. For this 16th installment, we did an open discussion for the first time.
The topic of open discussion was &ldquo;Does automated deployment and DevOps add value to the organization?&rdquo;.
It was the highlight of the event.</p>

<p><img class="center" src="http://geshan.com.np/images/php-dev-meetup-16/php-dev-meetup-16.jpg" title="PHP Dev Meetup 16 Open Panel discussion on DevOps" alt="PHP Dev Meetup 16 Open Panel discussion on DevOps"></p>

<!-- more -->


<h2>How did it all unfold</h2>

<p>The first talk was given by Amrit GC on &ldquo;Ansible for PHP Developers&rdquo;, then I presented my talk on &ldquo;Simplified Gitflow&rdquo;.
After those two regular talks we had a lightening talk presented by Manish Jung Thapa (MJT) on PHP Developers Nepal Community.
Last part of the program was an open discussion on &ldquo;Does automated deployment and DevOps add value to the organization?&rdquo; which
got a lot of questions from the audience. It was great to moderate the open discussion. Overall, it was an amazing meetup. I guess
there were around 100 participants which makes it one of the biggest PHP Developers meetup in terms of audience size.</p>

<h2>My Talk on Simplified Gitflow</h2>

<p>This is not the first time I presented this talk :). I had already given this talk at <a href="http://geshan.com.np/blog/2015/09/how-to-use-simplified-gitflow-branching-model-video/">YIPL in Mar 2015</a>.
This time I changed the slides and made it more general. I hope it was helpful to the audience.</p>

<p><img class="center" src="http://geshan.com.np/images/php-dev-meetup-16/simplified-gitflow-talk.jpg" title="PHP Dev Meetup 16 My talk on simplified gitflow" alt="PHP Dev Meetup 16 My talk on simplified gitflow"></p>

<h2>Slides of Simplified Gitflow</h2>

<script async class="speakerdeck-embed" data-id="acdf3ecb8fd84007b33113d906e5dd3c" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<h2>Video of my talk on Simplified Gitflow</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/jznORrhoV-M?rel=0" frameborder="0" allowfullscreen></iframe>


<p>More vidoes of the full event in this <a href="https://www.youtube.com/playlist?list=PLhTqkNYfkucxGk2OssIseNLMF9jPXYoHC">playlist</a>.</p>

<h2>Hope to see more meetups</h2>

<blockquote><p>Hope there will be a Developers Nepal meetup which is language agnostic soon. Kudos.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Podcasts Every Software Engineer/developer Should Subscribe to - Part 2]]></title>
    <link href="http://geshan.com.np/blog/2016/05/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-2/"/>
    <updated>2016-05-03T15:29:42+10:00</updated>
    <id>http://geshan.com.np/blog/2016/05/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-2</id>
    <content type="html"><![CDATA[<p>Listening to podcasts is a good way to learn new things. Like the last <a href="http://geshan.com.np/blog/2015/10/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to/">time</a>, I have found some more podcasts
with amazing content and sound quality. In this post, I will list 3 awesome podcasts.
All software engineers/developers should subscribe to them now.</p>

<p><img class="center" src="http://geshan.com.np/images/3-podcasts-part-2/3-podcasts-sw-eng-part-02.jpg" title="3 podcasts every software engineer should subscribe to - part 2" alt="3 podcasts every software engineer should subscribe to - part 2">
(Background image shot by me)</p>

<!-- more -->


<h2><a href="http://softwareengineeringdaily.com/category/podcast/">Software Engineering Daily</a></h2>

<p>Software engineering daily is a daily podcast hosted by <a href="http://jeffmeyerson.com/">Jeff Meyerson</a>.<br/>
He has worked at Amazon and knows what he is talking about. T
he interviews are in-depth, long and enjoyable. Jeff is sharp, there is never a
dull moment in the one to one interviews he conducts. He covers a wide range of subjects from docker/kubernates
to logging and git.</p>

<p><img class="center" src="http://geshan.com.np/images/3-podcasts-part-2/software-engineering-daily-podcast.jpg" title="Software Engineering Daily podcast" alt="Software Engineering Daily podcast"></p>

<h2><a href="https://scaleyourcode.com/interviews">Scale your code</a></h2>

<p>Christophe Limpalair hosts Scale your code podcast. A new episode usually arrives every 15 days. He also interviews known
tech personalities. The podcast covers a wide array of topics from open source to performance. This podcast informs
how the big players deal with scaling and performance problems.</p>

<blockquote><p>Scale Your Code&rsquo;s mission is to organize the world&rsquo;s programming knowledge from top sources and make it universally
accessible to improve software security, speed, and reliability.</p></blockquote>

<p><img class="center" src="http://geshan.com.np/images/3-podcasts-part-2/scale-your-code-podcast.jpg" title="Scale your code podcast" alt="Scale your code podcast"></p>

<h2><a href="http://www.scrum-master-toolbox.com/category/podcast/">Scurm Master Toolbox</a></h2>

<p>Scrum master toolbox podcast is another daily podcast with a theme for each weekday. Vasco Duarte hosts this podcast.
He conducts the interviews with ease and a purpose to get the best out of his guests. Regardless of you do scrum or not
this will help you in your career. Software engineers are solution providers. Understanding team dynamics, product
management and change management is important in our work life.</p>

<p><img class="center" src="http://geshan.com.np/images/3-podcasts-part-2/scrum-master-toolbox-podcast.jpg" title="Scurm Master Toolbox podcast" alt="Scurm Master Toolbox podcast"></p>

<blockquote><p>For this time it was all podcasts with one on one interviews. Hope you like them and it helps you expand your tech horizon.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Simple Rules for Less or No Git Conflicts]]></title>
    <link href="http://geshan.com.np/blog/2016/04/3-simple-rules-for-less-or-no-git-conflicts/"/>
    <updated>2016-04-28T16:14:43+10:00</updated>
    <id>http://geshan.com.np/blog/2016/04/3-simple-rules-for-less-or-no-git-conflicts</id>
    <content type="html"><![CDATA[<p>Do you write at least 10 lines of code a day in any programming language? Do you work alone or in a team?
If your answer is yes to both questions, you need to learn <code>git</code> even if you work alone in a project.
<a href="https://git-scm.com/">Git</a> is the most popular versions control system and it has become a must have
software engineer skill.</p>

<p>I have seen teams fall into this trap of git conflicts when they start using git and some type of
<a href="http://geshan.com.np/blog/2014/12/do-you-git-your-code-follow-this-simplified-gitflow-model/">gitflow</a>.
Merging branches to the main branch becomes a pain when there are git conflicts.
In this post I am going to reveal 3 simple rules to avoid git conflicts.</p>

<p><img class="center" src="http://geshan.com.np/images/3-rules-git-conflict/git-conflict.png" title="3 simple rules for less or no git conflicts" alt="3 simple rules for less or no git conflicts"></p>

<!-- more -->


<h2>Assumption</h2>

<p>You have some working knowledge of git. You follow a git branching model like gitflow or simplified gitflow.</p>

<h2>Rule 1: Keep your changes small</h2>

<p>This is the golden rule to avoid git conflicts in teams. Conflicts occurs when 2 team members make changes
around the same line of code. Like John changes like 5-10 in readme.md. Jack changes like 7-15 in the same
readme.md file on a different branch. Have a rule of thumb that each pull request can have at most 20 files
changed with 200 line addition. If changes are less there is less chances of having things overlapped. As a
side effect, it will make deploying and testing changes easy too.</p>

<h2>Rule 2: Rebase with your main branch (generally master) when it changes</h2>

<p>When your main branch changes, rebase the branch you are working on with it. Usually <code>master</code> is the
main branch so it will be best if you rebase with master at least once a day. This saves you from bringing
in lots of changes done by other team member late. Its the same concept as above, get small changes step by
step many times than getting it all at once. At the end of the day always do the following, given
you are on your working branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout master
</span><span class='line'>git fetch
</span><span class='line'>git pull --rebase origin master
</span><span class='line'>git checkout -
</span><span class='line'>git rebase master</span></code></pre></td></tr></table></div></figure>


<p>You get the latest master. Then you go back to your previous branch and rebase your branch with latest master.</p>

<h2>Rule 3: Review pull requests faster and merge them to main branch</h2>

<p>As I have stated earlier &ldquo;An open pull request (PR) is a liability in at least 2 ways. 1 it’s a feature/fix not
shipped to customers. 2 it will invite code conflicts soon.&rdquo; Have a rule, pull requests need action by 3 days of
opening them. You can review code, if code is ok deploy and merge or review code, fix issues then deploy and merge.
This will help the team ship things faster as well as not have pull requests open unattended for weeks.</p>

<h3>Useful Tip</h3>

<p>You followed the above rules, still landed in a git conflict situation? Use <code>git cherry-pick</code>. If you have more
than one commit in your working branch first <a href="http://geshan.com.np/blog/2014/07/4-git-tips-beyond-basics/">squash</a>
it to one commit. Then create a new branch out of master/your main branch and do <code>git cherry-pick &lt;sha-of-your-squashed-commit&gt;</code>.<br/>
Given you have only 1 commit on your working branch <code>feature11</code> and you are on <code>feature11</code> right now, do the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout master; git fetch && git pull --rebase origin master
</span><span class='line'>git checkout -b feature-11-new
</span><span class='line'>git cherry-pick 249bd9b150fdb1e6fc9e58af9823f70cc52579a3</span></code></pre></td></tr></table></div></figure>


<p>In the above example <code>249bd9b150fdb1e6fc9e58af9823f70cc52579a3</code> is used for demo only. You can know your SHA hash with <code>git log -1</code>
being on branch <code>feature11</code></p>

<h2>Conclusion</h2>

<p>There is no silver bullet to avoid git conflicts all the time. You will face it now and then.
If you run into git conflicts everyday the process and system needs to change.
Be logical, if you have a PR with 50 files changed and 700 new lines you will face conflicts.</p>

<blockquote><p>I hope you face less git conflicts or even completely avoid them.</p></blockquote>
]]></content>
  </entry>
  
</feed>
