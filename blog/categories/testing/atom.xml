<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Geshan's Blog]]></title>
  <link href="http://geshan.com.np/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://geshan.com.np/"/>
  <updated>2018-10-08T08:07:29+11:00</updated>
  <id>http://geshan.com.np/</id>
  <author>
    <name><![CDATA[Geshan Manandhar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[There Are Only Two Types of Automated Software Tests, Fast Ones and Not Fast Ones]]></title>
    <link href="http://geshan.com.np/blog/2016/03/there-are-only-two-types-of-automated-software-tests/"/>
    <updated>2016-03-17T16:38:18+11:00</updated>
    <id>http://geshan.com.np/blog/2016/03/there-are-only-two-types-of-automated-software-tests</id>
    <content type="html"><![CDATA[<p>Tests check that the code does what it is expected to do. It also gives confidence to the software engineer that the code
works as intended. This equates to less or no bugs in the software. You must have heard about lots of types of automated software tests.
There is unit testing, integration testing, functional testing, acceptance testing, smoke testing etc.
As per Guru99&rsquo;s <a href="http://www.guru99.com/types-of-software-testing.html">post</a> there are more than 100 types of
software testing. In this post I am going to categorize automated software tests into two, the fast ones and not fast ones.</p>

<p><img class="center" src="/images/testing-types/software-testing.jpg" title="&lsquo;There are only two types of automated software tests, fast ones and not fast ones&rsquo; &lsquo;There are only two types of automated software tests, fast ones and not fast ones&rsquo;" ></p>

<!-- more -->


<h3>How do you distinguish between slow and fast tests?</h3>

<p>Generally, if your whole tests suite runs in seconds it is fast.
If your whole test suite runs in minutes/hour it is slow. To make your tests small you need to make your application small.
As faster tests running on your Continuous Integration (CI) service will give you faster feedback.
May be it is time to go micro-services?</p>

<p>Lets discuss the more about fast and not fast (slow) automated software tests.</p>

<h3>The fast tests</h3>

<p>Fast tests are code that test one unit of code generally a method. Unit test is a type of fast test.
They don&rsquo;t depend on any external dependencies. External dependencies include file system, database, web server, network
or any third party API or service. Unit tests even mock the other code elements they need like other classes and its methods.
This makes the test focused on one unit and they run in milliseconds/seconds not minutes. A simple example is below:</p>

<script src="http://gist-it.appspot.com/http://github.com/geshan/dataprovider-example/blob/master/tests/DataProvider/Example/Test/CheckoutTest.php"></script>


<p>You can view the full code <a href="http://github.com/geshan/dataprovider-example">here</a>, yes it is a simple class with no code or external dependency.</p>

<p>Some integration tests can also be fast tests. These integration tests can test many classes. They should not
dependent on any external dependencies mentioned above to obtain speed. So these tests will still run in seconds and
not take minutes to finish.</p>

<h3>The not fast tests (slow ones)</h3>

<p>Any test that takes long to run are not fast tests (slow tests). Generally, these type of tests need to load
the whole application to test it. These types of tests depend on external dependencies. External dependencies include file
system, database, web server, network, third party API or service.</p>

<p>Acceptance tests that need to load a full web application on a browser is a type of slow tests. Even smoke tests if it needs
to load the whole application and takes long time to execute fall in this category.</p>

<script src="https://gist.github.com/geshan/4512326704954f6b8388.js"></script>


<p>The above example is taken from <a href="https://github.com/Sylius/Sylius/blob/master/features/checkout/checkout_with_offline_payment.feature">Sylius</a>
project, to test checkout with offline payment method on the browser.</p>

<h3>Conclusion</h3>

<p>Testing is super important for a robust software application. Automated testing + CI is one of the <a href="http://geshan.com.np/blog/2015/10/4-pillars-of-a-solid-software-application-and-tools-to-support-it/">four pillars</a>
of any solid software application. Happy testing hope your tests run in seconds not minutes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Software Engineering Proverbs/quotes I Wrote in the Past Months]]></title>
    <link href="http://geshan.com.np/blog/2016/03/10-software-engineering-proverbs-slash-quotes-i-wrote-in-the-past-months/"/>
    <updated>2016-03-14T22:30:20+11:00</updated>
    <id>http://geshan.com.np/blog/2016/03/10-software-engineering-proverbs-slash-quotes-i-wrote-in-the-past-months</id>
    <content type="html"><![CDATA[<p>In the past months, I was tweeting some insightful and enlightening software engineering proverbs. Like the one below</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">There is no pill to convert yourself as a good <a href="https://twitter.com/hashtag/programmer?src=hash">#programmer</a>, it takes lots of reading, learning and practice. So start now :) <a href="https://twitter.com/hashtag/code?src=hash">#code</a> <a href="https://twitter.com/hashtag/software?src=hash">#software</a></p>&mdash; Geshan Manandhar (@geshan) <a href="https://twitter.com/geshan/status/707796907582726145">March 10, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I browsed through my twitter timeline and collected them in one place.</p>

<p><img class="center" src="/images/10-quotes/code-html-small.jpg" title="&lsquo;10 software engineering proverbs-quotes I came up with in past months&rsquo; &lsquo;10 software engineering proverbs-quotes I came up with in past months&rsquo;" ></p>

<h2>Here are the quotes with visuals :</h2>

<!-- more -->


<hr />

<h3>There is no pill to convert yourself as a good programmer, it takes lots of reading, learning and practice. So start now.</h3>

<p><img class="center" src="/images/10-quotes/01pills.jpg" title="&lsquo;There is no pill to convert yourself as a good programmer, it takes lots of reading, learning and practice. So start now.&rsquo; &lsquo;There is no pill to convert yourself as a good programmer, it takes lots of reading, learning and practice. So start now.&rsquo;" ></p>

<hr />

<h3>An open pull request (PR) is a liability in at least 2 ways. 1 it&rsquo;s a feature/fix not shipped to customers. 2 it will invite code conflicts soon.</h3>

<p><img class="center" src="/images/10-quotes/02PR.jpg" title="&lsquo;An open pull request is a liability in at least 2 ways. 1 it is a feature-fix not shipped to customers. 2 it will invite code conflicts soon.&rsquo; &lsquo;An open pull request is a liability in at least 2 ways. 1 it is a feature-fix not shipped to customers. 2 it will invite code conflicts soon.&rsquo;" ></p>

<hr />

<h3>Talking about automated testing and Continuous Integration(CI) is easy, balancing it with delivery and cost as a web shop manager is hard.</h3>

<p><img class="center" src="/images/10-quotes/03test-ci-balance.jpg" title="&lsquo;Talking about automated testing and Continuous Integration(CI) is easy, balancing it with delivery and cost as a web shop manager is hard.&rsquo; &lsquo;Talking about automated testing and Continuous Integration(CI) is easy, balancing it with delivery and cost as a web shop manager is hard.&rsquo;" ></p>

<hr />

<h3>Having automated tests but no Continuous Integration(CI) is like having a sword but letting it rot.</h3>

<p><img class="center" src="/images/10-quotes/04test-ci-sword.jpg" title="&lsquo;Having automated tests but no Continuous Integration(CI) is like having a sword but letting it rot.&rsquo; &lsquo;Having automated tests but no Continuous Integration(CI) is like having a sword but letting it rot.&rsquo;" ></p>

<hr />

<h3>You cannot follow everything by the book. It&rsquo;s generally an ish implementation like Agileish, Kanbanish and RESTish.</h3>

<p><img class="center" src="/images/10-quotes/05follow-book.jpg" title="&lsquo;You cannot follow everything by the book. It is generally an ish implementation like agileish, kanbanish and RESTish.&rsquo; &lsquo;You cannot follow everything by the book. It is generally an ish implementation like agileish, kanbanish and RESTish.&rsquo;" ></p>

<hr />

<h3>If you are thinking of a software product idea, make a pain killer people can&rsquo;t live without not an optional vitamin people can and will skip.</h3>

<p><img class="center" src="/images/10-quotes/06pain-killer.jpg" title="&lsquo;If you are thinking of a software product idea, make a pain killer people can not live without not an optional vitamin people can and will skip.&rsquo; &lsquo;If you are thinking of a software product idea, make a pain killer people can not live without not an optional vitamin people can and will skip.&rsquo;" ></p>

<hr />

<h3>Software engineers have power to create great solutions but the best software to solve the least important problem is of no use.</h3>

<p><img class="center" src="/images/10-quotes/07solution-importance.jpg" title="&lsquo;Software engineers have power to create great solutions but the best software to solve the least important problem is of no use.&rsquo; &lsquo;Software engineers have power to create great solutions but the best software to solve the least important problem is of no use.&rsquo;" ></p>

<hr />

<h3>Programmers/developers need to become software engineers. Think of solution then technology to implement it. Think of abstractions then code.</h3>

<p><img class="center" src="/images/10-quotes/08solution-abstract.jpg" title="&lsquo;Programmers-developers need to become software engineers. Think of solution then technology to implement it. Think of abstractions then code.&rsquo; &lsquo;Programmers-developers need to become software engineers. Think of solution then technology to implement it. Think of abstractions then code.&rsquo;" ></p>

<hr />

<h3>Software developers are solution providers first, engineers second. Solution should have business value than using the latest tech fad.</h3>

<p><img class="center" src="/images/10-quotes/09solution-value.jpg" title="&lsquo;Software developers are solution providers first, engineers second. Solution should have business value than using the latest tech fad.&rsquo; &lsquo;Software developers are solution providers first, engineers second. Solution should have business value than using the latest tech fad.&rsquo;" ></p>

<hr />

<h3>If you don&rsquo;t sharpen your axe then it will take more time and effort to cut the tree. Same goes for software development.</h3>

<p><img class="center" src="/images/10-quotes/10axe.jpg" title="&lsquo;If you don&rsquo;t sharpen your axe then it will take more time and effort to cut the tree. Same goes for software development.&rsquo; &lsquo;If you don&rsquo;t sharpen your axe then it will take more time and effort to cut the tree. Same goes for software development.&rsquo;" ></p>

<hr />

<h3>Disclaimer</h3>

<p>Not all of the above quotes are created by me, some of them are inspired/adapted from things I read online and podcasts I listen to. Thanks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Pillars of a Solid Software Application and Tools to Support It]]></title>
    <link href="http://geshan.com.np/blog/2015/10/4-pillars-of-a-solid-software-application-and-tools-to-support-it/"/>
    <updated>2015-10-10T17:21:52+11:00</updated>
    <id>http://geshan.com.np/blog/2015/10/4-pillars-of-a-solid-software-application-and-tools-to-support-it</id>
    <content type="html"><![CDATA[<p>Software development is not just punching some code on the keyboard for desired output. The business side of software development always takes priority than the technicalities of it.</p>

<p>I have seen some software development teams are slow because they have a lot of technical debt. Some teams are naive, the members don&rsquo;t want to explore new things . They are stuck with 5 year old technology like FTP, old legacy framework etc. In this post, I will shed some light on the four basic and important things of a solid software application. This contents of post is language and framework agnostic. It is applicable to any software project.</p>

<p><img class="center" src="/images/4-pillars-software-application/4-pillars-software-application.png" title="&lsquo;4 pillars of a solid software application&rsquo; &lsquo;4 pillars of a solid software application&rsquo;" ></p>

<!-- more -->


<p><strong>Assumptions</strong></p>

<p>For this post I have made the following assumptions:</p>

<ul>
<li>The software development team is using some Version Control System (VCS) like git.</li>
<li>There is some form of project management and team structure in place.</li>
</ul>


<h2>Maintainable Code</h2>

<p>Making software work is super important, making it just work is a problem. I have seen teams writing code for the sake of making it work. Sometimes it feels like the code is there just for compilers/interpreters not humans. Code, simple, readable and maintainable is also important. We have discussed some rules about making code maintainable do <a href="http://blog.yipl.com.np/7-golden-rules-of-simple-clean-code/">read</a> it. <a href="http://www.slideshare.net/pirhilton/how-to-name-things-the-hardest-problem-in-programming">Naming things well</a> and writing relevant code comments is also undermined.</p>

<p>Having a culture of code review always helps. If someone else can check your code before its merged to the main branch, it is a good practice to follow. It opens up more ways to learn how to code in a practical way. Code reviews are better done in systems like <a href="http://github.com">Github</a>, <a href="http://bitbucket.org">Bitbucket</a> and <a href="http://gitlab.com">Gitlab</a>.</p>

<h2>Automated Testing with Continuous Integration</h2>

<p>Having automated tests is important. Opt for the test type that matches your team&rsquo;s current skill set. Unit testing are good to have. Writing testable code and giving team members the skill to do unit testing is an investment. Best way to approach unit testing will be grab the low hanging fruit. It will be better to start with Smoke Tests or basic functional tests. Doing a web application on each push/deployment? Check that all pages respond with a 200 HTTP response.</p>

<p>Step by step add more tests and time for your team members to gain more skills. As soon as you have some form of automated tests, wire it up with a <a href="https://en.wikipedia.org/wiki/Continuous_integration">Continuous Integration (CI)</a> service. Some good options are <a href="https://travis-ci.com">Travis CI</a>, <a href="http://wercker.com">Wercker</a>, <a href="http://shippable.com">Shippable CI</a>.</p>

<h2>Automated Deployment</h2>

<p>Finished feature should reach production from developer&rsquo;s machine in less time. It will be possible using automated deployment using latest tools. Are you using File Transfer Protocol (FTP) in 2015? You should stop it now, the first step towards automation for a FTP user is use <a href="http://git-ftp.github.io/git-ftp/">GitFTP</a>. It is an automated way to get the changed files to server than copying it over a FTP client.</p>

<p>Do one step deployment and least human work. Tools like <a href="http://capistranorb.com/">Capistrano</a>, <a href="http://www.fabfile.org/">Fabric</a>, <a href="http://rocketeer.autopergamene.eu/">Rocketeer</a> are used for automated deployment process. To sum it up, <a href="http://geshan.com.np/blog/2015/08/the-best-automated-deployment-tool-the-one-that-fits-your-needs/">the best deployment tool is&hellip; the one that fits your needs</a>.</p>

<h2>Logging with Monitoring</h2>

<p>Logs are the only way your software application talks back to you. Gather all your system, application logs and make it accessible via a web interface. Follow the logging <a href="https://tools.ietf.org/html/rfc5424">standard</a> and use free SAAS to render your logs in a readable way that gives you value. If dog is a man’s best friend, log is a developer’s best friend. Understand and exploit <a href="http://geshan.com.np/blog/2015/08/importance-of-logging-in-your-applications/">the importance of logging in your software application</a>.</p>

<p>Just having logs is not enough, view your logs after each change. Always check your logs after each deployment to track any suspicious activity. You can use <a href="http://logentries.com">Logentries</a> or <a href="http://loggly.com">Loggly</a> for cloud logging.</p>

<h2>Conclusion</h2>

<p>I have not focused on the server and devOps part of the software application and deployment. These are the practices all software engineers should adhere to. These should be the goals whenever a new project starts.</p>

<blockquote><p>Without 4 stable legs even a chair falls. Save your application from going down follow these 4 practices.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Unit Testing in Laravel]]></title>
    <link href="http://geshan.com.np/blog/2015/07/getting-started-with-unit-testing-in-laravel/"/>
    <updated>2015-07-25T14:57:42+10:00</updated>
    <id>http://geshan.com.np/blog/2015/07/getting-started-with-unit-testing-in-laravel</id>
    <content type="html"><![CDATA[<p>Automated Testing an application is kind of a puzzle given the choice of methodologies (TDD, BDD&hellip;), frameworks etc
there is no clear direction on how to test an application. Same applies for any PHP application, where you have
many frameworks, methods and styles to choose from. In this blog post I will shed some light on how to get started
with &ldquo;Unit&rdquo; testing in a Laravel application. Laravel has gained lots of popularity in the past years may be due to its
simplicity, ease of use, clear documentation and availability of packages/libraries.</p>

<p><img class="center" src="/images/laravel-unit-tests/laravel-popularity.png" title="&lsquo;Laravel is very popular&rsquo; &lsquo;Laravel is very popular&rsquo;" ></p>

<!-- more -->


<h2>Introduction</h2>

<p>A general issue with PHP Frameworks is that for framework code they always use unit testing and in the documentation for
applications using the framework they document and support using functional testing. It makes sense in a way that the framework
code is general and the application code is specific but it should also be clearly mentioned that the code can be
tested in a unit test fashion and not only on how it is rendered in a browser. Same goes for laravel the framework
tests are <a href="https://github.com/laravel/framework/blob/5.1/tests/View/ViewBladeCompilerTest.php">Unit</a> test and the
documentation for application tests are for <a href="http://laravel.com/docs/5.1/testing">functional</a> test.</p>

<p><img class="center" src="/images/laravel-unit-tests/laravel-testing-doc.png" title="&lsquo;Laravel application testing doc&rsquo; &lsquo;Laravel application testing doc&rsquo;" ></p>

<h2>Qualities of Unit tests</h2>

<p>Unit tests should test only one method or be focus on one class and not take into account the dependencies. All the
dependencies should be mocked and only the class/method under test should be tested if it works as expected. Some
qualities of unit tests are:</p>

<ol>
<li>It should test only one specific part of the application generally a method/class.</li>
<li>It should be simple and verify only the specific part under test (single unit of work)</li>
<li>It should not depend on external data</li>
<li>It should not dependent on external resources like file system, database etc</li>
<li>It should not depend on particular order and be isolated, so you could even run it in parallel</li>
</ol>


<p>The above 5 characteristics make it easy to setup and super fast when you run as there are no external dependencies
like a database or file system.</p>

<p><img class="center" src="/images/laravel-unit-tests/laravel-unit-tests.png" title="&lsquo;Laravel unit tests&rsquo; &lsquo;Laravel unit tests&rsquo;" ></p>

<h2>More on Unit testing</h2>

<p>Unit tests is about writing testable code, if your functions are 50 odd lines and your classes are 1000+ lines writing
unit tests for them will be a pain. If the code is well structured and broken down into logical classes and method
writing unit tests will be a breeze.</p>

<h2>Unit testing in Laravel</h2>

<p>In case of Laravel, you can follow your own structure and make the controllers very slim and use services where the
domain/business logic can reside. For this example I will use a checkout example with following conditions:</p>

<ol>
<li>If the payment method is Cash, it will add 5.0 as Cash on Delivery Fee</li>
<li>For all other payment methods the Cash on Delivery Fee will be 0.0</li>
</ol>


<h2>New Laravel Structure and steps</h2>

<p>We will structure the Laravel application as:</p>

<p><img class="center" src="/images/laravel-unit-tests/laravel-unit-test-structure.png" title="&lsquo;Laravel unit test application structure&rsquo; &lsquo;Laravel unit test application structure&rsquo;" ></p>

<p>For the above case we will do the following to achieve unit testing with a structure having Service as below:</p>

<ul>
<li>Get a basic laravel set up with <code>composer create-project laravel/laravel --prefer-dist</code></li>
<li>Add a <a href="https://github.com/geshan/laravel-unit-test-example/blob/master/app/Services/Checkout.php">Checkout service</a> at <code>App\Services\Checkout</code>, write relevant code to fulfill above requirements.</li>
<li>Add the checkout service as a container service in <a href="https://github.com/geshan/laravel-unit-test-example/blob/master/app/Providers/AppServiceProvider.php#L27">App\Providers\AppServiceProvider</a> with
<code>php
public function register()
{
  $this-&gt;app-&gt;instance('Checkout', new Checkout());
}
</code></li>
<li>Add a <a href="https://github.com/geshan/laravel-unit-test-example/blob/master/app/Http/Controllers/CheckoutController.php">Checkout controller</a> at <code>App\Http\Controllers</code></li>
<li>Add a route <code>/place</code> in <a href="https://github.com/geshan/laravel-unit-test-example/blob/master/app/Http/routes.php#L19">app/Http/routes.php</a> as
<code>php
Route::get('/place/{paymentMethod}', [
  'as' =&gt; 'order-place', 'uses' =&gt; 'CheckoutController@placeOrder'
]);
</code></li>
<li>Change the <a href="https://github.com/geshan/laravel-unit-test-example/blob/master/composer.json#L26">composer.json</a> to have namespace in tests.</li>
<li>Add <a href="https://github.com/geshan/laravel-unit-test-example/blob/master/tests/Services/CheckoutTest.php">test class</a> for the newly added Checkout service at <code>Test\Services\CheckoutTest</code>, write relevant test.</li>
<li>Run the unit tests <code>./vendor/bin/phpunit</code> they are green in a matter of seconds, smile :)</li>
</ul>


<p>This is a very simple example without mocking and using methods like <code>$this-&gt;mockedObj-&gt;shouldReceive('mockedMethod')-&gt;once()</code>, it
is a getting started post not a deep dive :).</p>

<p>You can have a look on how I did it with the <a href="https://github.com/geshan/laravel-unit-test-example/commits/master">github commits</a>.
You might be thinking we could do it tests first full TDD style, in my opinion having tests count how you add them is
up to you. It&rsquo;s great to write tests first but it takes time to come to that level so rather then not having tests at
all I would opt for having tests after code. Below is example of the test code with use of <a href="http://bit.ly/1Fe0cwx">data providers</a>:</p>

<pre><code class="php">
/**
     * Data provider for testCalculateTotal
     * variables are in the order of
     * $paymentMethod, $expectedTotal
     *
     * @return type
     */
    public function paymentMethodProvider()
    {
        return [
            ['Cash', 100.00],
            ['Credit Card', 95.00]
        ];
    }

    /**
     * Test to check if the order total is calculated correctly
     * for given payment method.
     *
     * @param string $paymentMethod
     * @param float $expectedTotal
     *
     * @dataProvider paymentMethodProvider
     */
    public function testCalculateTotal($paymentMethod, $expectedTotal)
    {
        $this-&gt;assertEquals(
            $this-&gt;checkout-&gt;calculateTotal($paymentMethod),
            $expectedTotal,
            sprintf('Testing total calculation for %s.', $paymentMethod)
        );
    }
</code></pre>

<p><strong>The full running app with tests is available as an open source repository on <a href="https://github.com/geshan/laravel-unit-test-example/">github</a>.</strong></p>

<p><img class="center" src="/images/laravel-unit-tests/running-laravel-app.png" title="&lsquo;Running Laravel app with PHP server&rsquo; &lsquo;Running Laravel app with PHP server&rsquo;" ></p>

<h3>Tip</h3>

<blockquote>
I found using `gulp tdd` quite interesting, specially as the tests were super fast. 

All I needed to do was change the provided gulp file with `mix.phpUnit();` and run `gulp tdd` then on 
each change my tests would automatically run and I would see the green or red desktop notification too. Quite handy.
</blockquote>


<p><img class="center" src="/images/laravel-unit-tests/tests-green-gulp.png" title="&lsquo;Handy gulp tdd for Laravel&rsquo; &lsquo;Handy gulp tdd for Laravel&rsquo;" ></p>

<h2>Choice of Tools and services</h2>

<p>For testing with Laravel I would recommend the following tools:</p>

<ol>
<li><a href="https://phpunit.de/">PHPUnit</a> Framework, even though BDD with <a href="http://www.phpspec.net">PHPSpec</a> is getting some
traction but only a handful of frameworks or systems are using PHPSpec. PHPUnit is still very popular.</li>
<li>For mocking use <a href="https://github.com/padraic/mockery">Mockery</a>, here as well <a href="https://github.com/phpspec/prophecy">Prophecy</a>
looks like a better option but then you will have issues with mocking static methods of eloquent models in case of Laravel.</li>
<li>Unit testing with PHP is a puzzle and Continuous Integration (CI) is the missing piece, there by if you are doing
an open source project I would suggest <a href="https://travis-ci.org/">Travis CI</a> which costs nothing and for a private project
<a href="http://shippable.com">Shippable</a> is a good CI service for free.</li>
</ol>


<h2>Conclusion</h2>

<p>As Martin Fowler emphasizes in his <a href="http://martinfowler.com/bliki/TestPyramid.html">test pyramid</a> we should always give
priority to more unit tests which will eventually strengthen the integration/functional tests we write for our project.
I don&rsquo;t believe that only having unit tests will remove the need of having functional tests still good unit test which
covers not only the code also its use cases will surely be a boon. Happy Unit testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PHPUnit Data Provider for Less Code and Greater Coverage]]></title>
    <link href="http://geshan.com.np/blog/2014/02/using-phpunit-data-provider-for-less/"/>
    <updated>2014-02-01T18:51:00+11:00</updated>
    <id>http://geshan.com.np/blog/2014/02/using-phpunit-data-provider-for-less</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on"><div class="separator" style="clear: both; text-align: center;"></div>Writing testable code is a harder target to achieve than just writing tests for the code written. You cannot write comprehensive tests that covers many function each of 200 or more lines and classes that measure 1000s of lines of code (<a href="http://en.wikipedia.org/wiki/Source_lines_of_code" target="_blank">LOC</a>). Writing testable code is always important if you want to be able to test/unit test your code and be confident that nothing will break.<br /><br />Tests also help a lot when you re-factor some code or write new features. If all the tests are passing you are quite sure that nothing is breaking. Seeing all tests come out green is a very good sight for us software engineer.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-mIzQVI5oxMU/Uuu1Bn0PmKI/AAAAAAAAndg/Wkq0HGPD1pM/s1600/all_green_tests.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-mIzQVI5oxMU/Uuu1Bn0PmKI/AAAAAAAAndg/Wkq0HGPD1pM/s1600/all_green_tests.jpg" height="156" width="640" /></a></div><!-- more --><br /><h2 style="text-align: left;">Testing in PHP with PHPUnit</h2>Unit testing and testing as a whole is not a new thing in PHP, &nbsp;<a href="http://phpunit.de/" target="_blank">PHPUnit</a> the de facto unit testing framework in PHP started in <a href="http://gpfr.sourceforge.net/releases/phpunit-1.0.0/" target="_blank">2001</a>, The chart below shows that popularity of PHPUnit has really grown over the past years in comparison to <a href="http://www.simpletest.org/" target="_blank">Simple Test</a> another PHP testing framework.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-iY16ziAjtiE/UuylucQEn-I/AAAAAAAAndw/cSZ9W2csjUM/s1600/phpUnit_popularity.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-iY16ziAjtiE/UuylucQEn-I/AAAAAAAAndw/cSZ9W2csjUM/s1600/phpUnit_popularity.jpg" height="387" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;"><span style="font-size: small;">Source:&nbsp;</span><a href="http://www.google.com/trends/explore#q=phpunit%2C%20simpletest" style="font-size: medium;" target="_blank">Google Trends</a></td></tr></tbody></table>PHPUnit is a great unit testing framework that can automate testing and help in getting optimal output. As they state in the <a href="http://phpunit.de/manual/current/en/index.html" target="_blank">documentation</a>:<br /><blockquote>The difference between a good programmer and a bad programmer is that the good programmer uses tests to detect mistakes as soon as possible. The sooner you test for a mistake the greater your chance of finding it and the less it will cost to find and fix.</blockquote>It is true the sooner the problem is detected and fixed the better it is, same goes when some code is re-factored, a new feature is added or a bug resolved.<br /><h2 style="text-align: left;">Data Provider in PHPUnit</h2><div>There are may features of PHPUnit, which can help in writing comprehensive <a href="http://en.wikipedia.org/wiki/Unit_testing" target="_blank">unit testing</a> and moving toward the direction of <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">test driven development</a> (TDD). Among them,&nbsp;<a href="http://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers" target="_blank">data providers</a> provide arbitrary arguments to a test function so that same code can be used to test multiple scenarios and possible cases. In this very simple example I will use a part of checkout. The logic is very simple:</div><div><ol style="text-align: left;"><li>If the payment method is &nbsp;&#8220;Cash&#8221;, apply a cash on delivery fee of 5.0</li><li>If the payment method is &#8220;Credit Card&#8221;, do not apply a cash on delivery fee.&nbsp;</li></ol><h3 style="text-align: left;">The part of the checkout class is given below:</h3><script src="http://gist-it.appspot.com/https://github.com/geshan/dataprovider-example/blob/master/src/DataProvider/Example/Checkout.php"></script><br />Source: <a href="https://github.com/geshan/dataprovider-example/blob/master/src/DataProvider/Example/Checkout.php" target="_blank">Github repository</a><br /><br /><h3 style="text-align: left;">The test for the above checkout class is given below:</h3><script src="http://gist-it.appspot.com/https://github.com/geshan/dataprovider-example/blob/master/tests/DataProvider/Example/Test/CheckoutTest.php"></script><br />Source: <a href="https://github.com/geshan/dataprovider-example/blob/master/tests/DataProvider/Example/Test/CheckoutTest.php" target="_blank">Github repository</a><br /><h3 style="text-align: left;">What makes using data provider in this example relevant and optimal?</h3></div><div><ul style="text-align: left;"><li>As the test needs to be run for both &#8220;Cash&#8221; and &#8220;Credit Card&#8221; the only thing it changes here is the addition of cash on delivery fee.</li><li>There is just one test with the payment method being passed as a parameter, saving us from writing X no of tests for X no. of payment methods. So less code and more coverage.</li><li>The test is clear concise and understandable.</li></ul><h3 style="text-align: left;">Things to consider in the code:</h3><div><ul style="text-align: left;"><li>The test runs the as many times as the data set provided by the provider function.</li><li>@dataProvider annotation is necessary in the test to get the data sets from the provider function.</li><li>When writing the provider function, its better to comment who is using the provided data sets and the order of variables (check the comment of &nbsp;paymentMethodProvider method).</li></ul><div>Both the above files with composer.json is available as a public <a href="https://github.com/geshan/dataprovider-example" target="_blank">git repository</a> for your reference, you can check the <a href="https://github.com/geshan/dataprovider-example/blob/master/README.md" target="_blank">read me</a> file to know how to run the tests.</div></div><h2 style="text-align: left;">Conclusion</h2></div><div>Whenever you write tests and think, &#8220;Why am I writing a new test for the similar thing. I guess there can be a way to write less test/code and cover all my test cases.&#8221; Then is time to use data providers in PHPUnit. You save on time and effort to cover the cases, a new case is just another array in the provider function, even in case of new test cases being added its a one line change given the tests pass. I hope this helps you to write less test code and achieve more coverage.</div><div><br /></div></div></div>

]]></content>
  </entry>
  
</feed>
