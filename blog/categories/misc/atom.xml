<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: misc | Geshan's Blog]]></title>
  <link href="http://geshan.com.np/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://geshan.com.np/"/>
  <updated>2018-12-26T08:37:14+11:00</updated>
  <id>http://geshan.com.np/</id>
  <author>
    <name><![CDATA[Geshan Manandhar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2018 in review: 5 most viewed posts of this year]]></title>
    <link href="http://geshan.com.np/blog/2018/12/2018-in-review-5-most-viewed-posts-of-this-year/"/>
    <updated>2018-12-25T18:55:50+11:00</updated>
    <id>http://geshan.com.np/blog/2018/12/2018-in-review-5-most-viewed-posts-of-this-year</id>
    <content type="html"><![CDATA[<p>I have never done this in the past 11 years of blogging, this time it is going to be different. I am listing the 5 most viewed posts from this blog in 2018. All posts are not from 2018 but they have been viewed more than the others. I am using my Google Analytics stats to compile this list. So, here I present the most popular blog posts of 2018 on <a href="https://geshan.com.np">Geshan.com.np</a>:</p>

<p><img class="center" src="/images/top-5-2018/everest.jpg" title="&lsquo;5 most viewed posts of 2018 a recap&rsquo; &lsquo;5 most viewed posts of 2018 a recap&rsquo;" ></p>

<!-- more -->


<h2>1. <a href="https://geshan.com.np/blog/2018/12/you-can-do-it-in-sql/">You Can Do It in SQL, Stop Writing Extra Code for That</a></h2>

<p>This post was published just 10 days back but I garnered a lot of views. The post highlights:</p>

<blockquote><p>Use SQL to do math like sum, average etc. Utilize it for grouping one to many relational values like getting categories of product. Leverage SQL for string manipulation like using CONCAT_WS for concating first name and last name. Exploit SQL to sort by a custom priority formula.</p></blockquote>

<p><img class="center" src="/images/do-it-in-sql/tea-lights.jpg" title="&lsquo;You can do it in SQL, stop writing extra code for that&rsquo; &lsquo;You can do it in SQL, stop writing extra code for that&rsquo;" ></p>

<h2>2. <a href="https://geshan.com.np/blog/2018/12/4-ways-docker-changed-the-way-software-engineers-work-in-past-half-decade/">4 Ways Docker Changed the Way Software Engineers Work in Past Half Decade</a></h2>

<p>Another post from this December that got pretty popular in past weeks. This post is about how docker has changed software engineering in the past 5 years. The post can be summarized as:</p>

<blockquote><p>With Docker, you ship the whole stack not only your code. Allocate minimum required resources to containers then scale them horizontally. With containers security generally already comes baked In. With Docker and Kubernetes you can get zero downtime and faster deployments leading to business profit.</p></blockquote>

<p><img class="center" src="/images/4-ways-docker/docker-whale.jpg" title="&lsquo;4 ways Docker changed the way software engineers work in past half decade&rsquo; &lsquo;4 ways Docker changed the way software engineers work in past half decade&rsquo;" ></p>

<h2>3. <a href="https://geshan.com.np/blog/2017/05/how-to-use-docker-compose-with-virtual-hosts-and-services-like-db-for-dev-environment/">How to Use Docker Compose With Virtual Hosts and Shared Services (Like Db) for Dev Environment</a></h2>

<p>This is another post about Docker, it is from May 2017. This piece was also able to gather a good amount of views. The post advocates:</p>

<blockquote><p>Use docker and docker-compose with external_links to reuse services like a database across multiple projects. Using Ngnix proxy with virtual hosts can simplify multi-project setup and operation.</p></blockquote>

<p><img class="center" src="/images/docker-compose-vhost/docker-compose-vhost.jpg" title="&lsquo;Docker compose with vhost and shared services&rsquo; &lsquo;Docker compose with vhost and shared services&rsquo;" ></p>

<h2>4. <a href="https://geshan.com.np/blog/2016/04/3-simple-rules-for-less-or-no-git-conflicts/">3 Simple Rules for Less or No Git Conflicts</a></h2>

<p>This is a post about git from 2016. It also got many hits this year probably due to some search engine traffic. Mainly the post can be summarized at</p>

<blockquote><p>Keep your changes small. Rebase your working branch with main branch often. And, review pull requests faster and merge them to main branch.</p></blockquote>

<p><img class="center" src="/images/3-rules-git-conflict/git-conflict.png" title="&lsquo;3 simple rules for less or no git conflicts&rsquo; &lsquo;3 simple rules for less or no git conflicts&rsquo;" ></p>

<h2>5. <a href="https://geshan.com.np/blog/2018/10/dont-code-your-microservice-like-a-monolith/">Don’t Code Your Microservice Like a Monolith, Keep It Maintainable Not Over-engineered</a></h2>

<p>This is a post from Oct this year about  Microservice and how to not code it like a Monolith. This post was also able to get some views from different sources. The post mainly advocates:</p>

<blockquote><p>Microservices are small software systems. You can safely ditch MVC. Say no to ORM and also not take the design pattern baggage for microservices. Focus on code performance, readability, and maintainability not some old rules and patterns. Those patterns were made when people were not doing microservices.</p></blockquote>

<p><img class="center" src="/images/microservice-code/lego.jpg" title="&lsquo;Do not code your microservice like a monolith, keep it maintainable not over-engineered&rsquo; &lsquo;Do not code your microservice like a monolith, keep it maintainable not over-engineered&rsquo;" ></p>

<h2>Conclusion</h2>

<blockquote><p>Looks like docker has been a popular topic for this year. Probably I would blog more about it next year too. I have started cross-posting my posts to <a href="https://dev.to/geshan">Dev.to</a> and medium publications like <a href="https://medium.freecodecamp.org/@geshan">FreeCodeCamp</a> and <a href="https://hackernoon.com/@geshan">HackerNoon</a>. I hope these posts help more and more people.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The most important tip for beginner software engineers is...]]></title>
    <link href="http://geshan.com.np/blog/2018/12/the-most-important-tip-for-beginner-software-engineers-is/"/>
    <updated>2018-12-21T19:47:44+11:00</updated>
    <id>http://geshan.com.np/blog/2018/12/the-most-important-tip-for-beginner-software-engineers-is</id>
    <content type="html"><![CDATA[<p>Most of the tutorials you have read or watched till now usually do one thing, spoon-feeding. This is &ldquo;OK&rdquo; to learn a new thing but not good when you need to <code>solve</code> a task. A task usually involves reaching a goal by overcoming a problem. This post unveils the most important &ldquo;tip&rdquo; for all beginner software engineers.</p>

<p><img class="center" src="/images/tip-beginner-sw-eng/puzzle.jpg" title="&lsquo;The most important tip for beginner software engineers is&rsquo; &lsquo;The most important tip for beginner software engineers is&rsquo;" ></p>

<!-- more -->


<h2>TL;DR</h2>

<blockquote><p>First, solve the problem. Then, write the code. - John Johnson</p></blockquote>

<p>In other words.</p>

<blockquote><p>Work the solution out on paper in steps, then start writing the code for it. Don&rsquo;t get tangled in the code and software design.</p></blockquote>

<h2>So what happens</h2>

<p>Many times I have heard this from beginner or even junior software engineers. I could follow the tutorial well and thought I understood the concept. But, when I tried to do a similar thing on my pet project I could not do it. It happens mainly because of 2 reasons. First, you somewhere lost your train of thought and could not establish a chain. Second, you were so tangled in the code that the main problem you were trying to solve became out of focus.</p>

<p>This problem also happens for Software Engineers and even Senior Software Engineers. The good thing is with experience you know when to stop or take a break. Then, come back to the problem with a different prescriptive and find a solution faster.</p>

<blockquote><p>Many of you can relate to this that you were trying so hard to fix an issue for hours. You took a break or slept over it and next session the solution was there in minutes.</p></blockquote>

<p>This is not magic this is looking at the problem from another viewpoint.</p>

<h2>Let&rsquo;s illustrate with an example</h2>

<p>You have to do a task, it is to create a refund with payments. A refund always has a reason like damaged, late delivery etc and the payments for that item can be maximum of 2. One of type cash another of type credit (store credit). You are also given the database schema. This is a back-end task and you need to create a POST <code>/refunds</code> API that can create the refund and its related payments. The database structure is as below:</p>

<p><img class="center" src="/images/tip-beginner-sw-eng/refund-schema-v2.png" title="&lsquo;refund schema v2&rsquo; &lsquo;refund schema example&rsquo;" ></p>

<p>You could discuss the API payload too with one of the team members and agreed on the below JSON payload:</p>

<pre><code>POST /refunds

{
 reason: "damaged",
 premium_customer: true,
 payments: [
  {
     item_id: 20,
     amount: 5000,
     is_cash: true    
  },
  {
     item_id: 20,
     amount: 7250,
     is_cash: false
  }
 ]
}

//decide on the response format
</code></pre>

<h3>The usual scenario</h3>

<p>What most beginner software engineers will do is start scanning the code base, if there is one. They will immediately start writing some code. If there is any testing culture in place maybe write some automated test code.</p>

<blockquote><p>This is where most beginner and even some experienced software engineers slip. Don&rsquo;t write code when you have not solved the problem.</p></blockquote>

<h3>The appropriate step</h3>

<p>The most appropriate step, in my opinion, is to sit down and solve the problem on paper in steps. So you ask yourself to write <code>Refund</code> and its related <code>Payments</code> on the database what do I need to do. You come up with a plan in steps and tweak it.</p>

<blockquote><p>If you have someone senior you can validate your steps and get feedback.</p></blockquote>

<p>This will also decrease the code review time a lot as both of you have already agreed on the modality of the solution.</p>

<h3>So how to do it</h3>

<p>The task as mentioned earlier is to write a create/POST API where Refunds with payments can be created. Each refund can have max 2 payment one of type cash and another one of type credit. It can also be one refund with only one payment of either cash or credit. This is how I would have written the following steps on paper:</p>

<ol>
<li>Create a method to get the data from the controller sent by user</li>
<li>Validate all the input for values, refund types, and reasons.</li>
<li>If all validation passes, generate a random alphanumeric number of length 10 which is not existing in the refund table (recursive check)</li>
<li>If validation fails to respond with a proper validation failure message, decide on response structure</li>
<li>Start a database transaction

<ol>
<li>Insert the refund related values of refund_nr, reason_reason, is_premium_customer to the <code>refund</code> table</li>
<li>On insert success, get the id of the last insert</li>
<li>With the refund_id, insert payment related values of fk_refund, fk_item, amount, is_cash to the <code>payment</code> table</li>
</ol>
</li>
<li>If all went well commit the database transaction</li>
<li>If there was any issue rollback database transaction</li>
<li>Respond with success or failure message depending on the databse transaction’s success with proper structure</li>
<li>Wire up the controller and this method</li>
</ol>


<h3>Follow the plan in steps, now write code</h3>

<p>After you have a step by step plan you can start writing code. Then,  you can go more in-depth on the method names, how to get the database connection and other details.</p>

<blockquote><p>Depending on the language and framework you can also decide where should the validation code stay.</p></blockquote>

<p>You could even write tests given the company and culture supports and encourages it.</p>

<p>When your solution is evident in your mind and you have a step by step action plan on paper now you can write code.</p>

<blockquote><p>You can even break up the parts in ways that will be easier to finish and wire up.</p></blockquote>

<p>For example, the testing logic can be something that can be written separately and tested on its own. It is thinking about independent parts that can be wired up together to form the solution.</p>

<h2>Conclusion</h2>

<p>When you face your next task don&rsquo;t start writing code from the get-go. First, get a hold of the problem then devise a solution with steps best done away from a screen on paper. Then refine your solution and discuss with someone. When you are satisfied, translate that solution to code. This is a bit methodical but very effective.</p>

<blockquote><p>Code is always a medium to the solution, not the solution itself.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You can do it in SQL, stop writing extra code for that]]></title>
    <link href="http://geshan.com.np/blog/2018/12/you-can-do-it-in-sql/"/>
    <updated>2018-12-14T19:30:54+11:00</updated>
    <id>http://geshan.com.np/blog/2018/12/you-can-do-it-in-sql</id>
    <content type="html"><![CDATA[<p>“SQL, Lisp, and Haskell are the only programming languages that I’ve seen where one spends more time thinking than typing.&ldquo; - Philip Greenspun</p>

<p>Even with thinking more than typing SQL (Structured Query Language) we software engineers use it as a way to pull data only.</p>

<blockquote><p>We usually don&rsquo;t leverage SQL&rsquo;s power of data manipulation and do the needed changes in code.</p></blockquote>

<p>This is quite prevalent in software engineers who work in web applications. This post aims to enlighten you about the powers of SQL you might know but generally don&rsquo;t use.</p>

<p><img class="center" src="/images/do-it-in-sql/tea-lights.jpg" title="&lsquo;You can do it in SQL, stop writing extra code for that&rsquo; &lsquo;You can do it in SQL, stop writing extra code for that&rsquo;" ></p>

<!-- more -->


<h2>TLDR;</h2>

<blockquote><p>Use SQL to do math like sum, average etc. Utilize it for grouping one to many relational values like getting categories of product. Leverage SQL for string manipulation like using CONCAT_WS for concating first name and last name. Exploit SQL to sort by a custom priority formula. Examples below&hellip;</p></blockquote>

<h2>The Example</h2>

<p>It will be easier to explain the superpowers of SQL putting it in action on an example. Below is a basic schema with 2 tables in MYSQL for a refunds microservice:</p>

<p><img class="center" src="/images/do-it-in-sql/refund-schema.png" title="&lsquo;You can do it in SQL- refund schema&rsquo; &lsquo;You can do it in SQL - refund schema example&rsquo;" ></p>

<p>There are 2 refunds and 7 related payments as example <a href="http://sqlfiddle.com/#!9/b242d/5">data</a>.</p>

<h3>Some assumptions</h3>

<p>For the refunds microservice example schema and applications following assumptions are made:</p>

<ol>
<li>Refunds microservice and data structure store the fk_item (the id of the ordered/delivered item), but it is not a hard foreign key.</li>
<li>Item can be refunded in either cash or credit for the amount paid for the same.</li>
<li>Items can be refunded many times as long as remaining balance can cover requested refund amount for each cash and credit. For example, item was paid 50 in cash and 50 in credit. 2 refunds of 20 cash and 20 credit can be done. So after these transactions balance will be 10 cash and 10 credit for that item (50-20-20).</li>
<li>Each refund can have multiple items payment. Each payment can be of type either cash or credit.</li>
<li>All amounts are stored in cents so they are integers.</li>
</ol>


<p>Now let&rsquo;s use some SQL powers. You can find the example with related queries running on <a href="http://sqlfiddle.com/#!9/b242d/5">SQL Fiddle</a>.</p>

<h3>Do the math in SQL</h3>

<p>As software engineers, let&rsquo;s say if we need to find the total cash and credit amount refunded for an item what would we do? We would run something like:</p>

<pre><code>SELECT fk_item, fk_refund, amount, is_cash 
FROM payment WHERE fk_item=2001;
</code></pre>

<p>With current data, it will give 3 rows like below:</p>

<p><img class="center" src="/images/do-it-in-sql/01result-without-group.png" title="&lsquo;Result without grouping and aggregate function sum&rsquo; &lsquo;Result without grouping and aggregate function sum&rsquo;" ></p>

<p>With these 3 rows, we would loop over them. If it is cash accumulate it to cashBalance variable, if not sum it up to creditBalace variable. Rather than that it would be a lot easier (probably faster) to do in SQL like:</p>

<pre><code>SELECT fk_item, SUM(amount) AS total_paid, 
IF(is_cash = 1, 'cash', 'credit') as type
FROM payment 
WHERE fk_item = 2001 
GROUP BY fk_item, is_cash;
</code></pre>

<p>Resulting in:</p>

<p><img class="center" src="/images/do-it-in-sql/02result-with-grouping.png" title="&lsquo;Result with grouping and aggregate function sum&rsquo; &lsquo;Result with grouping and aggregate function sum&rsquo;" ></p>

<p>The result is easy now if you need the total refund for the item just change the GROUP BY to be on fk_item and it&rsquo;s done. For 2 and 3 records it won&rsquo;t feel significant. If there were say 20 refunds for that item, the first solution with a loop is writing more code with no gain.  Like sum, other SQL functions can be used too. Simple math operations like <a href="https://www.w3schools.com/sql/func_mysql_sum.asp">sum</a>, multiply, <a href="https://www.w3schools.com/sql/func_mysql_avg.asp">average</a> etc can be easy with SQL. This means no more loops.</p>

<h3>Use GROUP_CONCAT to fetch related 1:m relation values</h3>

<p><a href="http://www.mysqltutorial.org/mysql-group_concat/">Group concat</a> is a powerful operation in SQL databases. It is very useful when you need to get data from one to many relationship. For instance, you want to get all tags for a blog post or you want to get all categories of a product. Concerning this refunds example, one item can be refunded multiple times. So we will get all the refunds associated with the item id. To get this we will run only 1 query and get it without any loops in the code like below:</p>

<pre><code>SELECT fk_item, 
GROUP_CONCAT(DISTINCT fk_refund) refund_ids FROM payment
WHERE fk_item = 2001;
</code></pre>

<p>This results in:</p>

<p><img class="center" src="/images/do-it-in-sql/03result-group-concat.png" title="&lsquo;Result with group_concat&rsquo; &lsquo;Result with group_concat&rsquo;" ></p>

<p>Now we know that item 2001 has been refunded twice for 2 refunds. It will be easy to explode the refund Ids with <code>,</code> and proceed with any related operation.</p>

<h3>String manipulation</h3>

<p>Many <a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html">string manipulation</a> tasks like substring, concatenation, change case, and string compare can be done in SQL. With this example, I am going to show the usage of <code>CONCAT_WS</code>. It is concat with a separator. It can also be used to select for instance first_name and last_name with space in between.</p>

<blockquote><p>In case of having an optional middle name <code>COALESCE</code> can be used with <code>CONCAT_WS</code>. That is something for you to explore :).</p></blockquote>

<p>In this example, I will select refund_nr with it&rsquo;s related reason:</p>

<pre><code>SELECT CONCAT_WS("-", refund_nr, reason) AS refund_nr_with_reason
FROM refund;
</code></pre>

<p>Resulting in:</p>

<p><img class="center" src="/images/do-it-in-sql/04result-concat-ws.png" title="&lsquo;Result with concat_ws&rsquo; &lsquo;Result with concat_ws&rsquo;" ></p>

<p>If this needs to be shown on the credit note document, for example, no extra code is needed to join the values again. SQL makes it one step easier again.</p>

<h3>Sorting with a custom formula</h3>

<p>All software engineers know you can sort based on a column. But if you are given a custom priority formula to sort, what would you do? Probably again resort back to code and loop to sort. So lets set the priority formula rules for above example:</p>

<ol>
<li>Premium customer refunds get the highest priority (we hack it with a priority of 9999999999)</li>
<li>Other than premium customers cash refunds get a priority of amount * 25 for credit it is amount * 20.</li>
</ol>


<p>As per above rules it is decided that premium customers and priority above 50000 (in cents) will be processed first. Then other refunds will be processes. Let&rsquo;s get the priority refunds as below:</p>

<pre><code>SELECT r.refund_nr, r.reason, p.fk_item, p.amount, p.is_cash, 
IF(p.premium_customer = 1, 9999999999, p.amount * (IF(is_cash = 1, 25, 20))) AS priority FROM 
refund AS r INNER JOIN payment AS p ON r.id = p.fk_refund
HAVING priority &gt; 50000
ORDER BY priority DESC
</code></pre>

<p>The results are below:</p>

<p><img class="center" src="/images/do-it-in-sql/05result-priority-formula.png" title="&lsquo;Result with sorting based on custom formula&rsquo; &lsquo;Result with sorting based on custom formula&rsquo;" ></p>

<p>With proper use of IF in SQL sorting by a custom priority formula is a lot easier than trying to do it with loops in code. Notice that even smaller amounts like 7.5 (750 cents) and 9.0 (900 cents) came to highest priority as these refund payment amounts were associated with premium customers.</p>

<blockquote><p>Use the superpowers of SQL to make your life easier as a software engineer.</p></blockquote>

<p>You can play with the example and run your own queries on <a href="http://sqlfiddle.com/#!9/b242d/5">SQL fiddle</a>.</p>

<h2>Conclusion</h2>

<p>There are other tricks of SQL that can help you as a software engineer. Like <code>UPDATE</code> with <code>INSERT</code> using <code>ON DUPLICATE KEY UPDATE</code>. Whenever you have an itch of doing some manipulation for data pulled in from database in code with loops, think again. The main takeaway from this story is:</p>

<blockquote><p>Exploit the power of SQL to write less code because &ldquo;the best code is the code that was never written&rdquo;. If it is not written there is no need to maintain it.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 tech medium publications software engineers should strive to write for]]></title>
    <link href="http://geshan.com.np/blog/2018/12/5-tech-medium-publications-software-engineers-should-strive-to-write-for/"/>
    <updated>2018-12-05T19:16:06+11:00</updated>
    <id>http://geshan.com.np/blog/2018/12/5-tech-medium-publications-software-engineers-should-strive-to-write-for</id>
    <content type="html"><![CDATA[<p>Starting a tech blog has changed in the last few years. 10 years back starting a blog without your website, you had 2 options Blogger or Wordpress. Both gave you a free sub-domain. Things did not change much for quite some time, but in 2012 medium came with a storm. It gained a lot of traction with its simplistic interface in 2014-2015. With the publication feature, Medium makes it very easy for a group of writers to collaborate.  These days I would suggest most people start their blog on it.</p>

<p><img class="center" src="/images/5-tech-medium-publications/library.jpg" title="&lsquo;5 tech medium publication software engineers should strive to write for&rsquo; &lsquo;5 tech medium publication software engineers should strive to write for&rsquo;" ></p>

<!-- more -->


<h2>Writing is tough, learning is essential</h2>

<p>Writing is never easy for most people. If you don&rsquo;t try it you never know if it is something you like or not.</p>

<blockquote><p>“A writer is someone for whom writing is more difficult than it is for other people.” ― Thomas Mann</p></blockquote>

<p>Writing is another form of expressing yourself. As people working in the tech domain, we need this skill of expressing ourselves well. Similarly, reading and learning about new things is also very important in our field. Learning is essential to survive in tech and move forward. Open source software there are a lot of consumers compared to producers. Likewise, there are a lot of readers for tech content but relatively much fewer writers.</p>

<h2>Tech Medium publications accepting writers</h2>

<p>Below are the tech publications on Medium I would suggest all software engineers to follow to sharpen their skills:</p>

<h3><a href="https://medium.freecodecamp.org/">FreeCodeCamp</a> - 511K followers</h3>

<p>FreeCodeCamp is the place to go for learning how to code for free. It has a very popular and frequently updated publication on Medium. The content published on FreeCodeCamp blog is excellent. There are 17 editors and more than a 1K+ writers on this publication. You will need to read this elaborate blog <a href="http://bit.ly/how-to-submit">post</a> to know how to submit your story there. Writing for them is not easy, they also do light editing of your stories. Even if your story gets accepted it could have a wait time of 1-2 weeks to be published (my first story for them is still in the pipeline).  All in all you must try to get your stories published there because of the sheer number of subscribers. It is #2 on <a href="https://toppub.xyz/">toppub.xyz</a>.</p>

<h3><a href="https://hackernoon.com/">HackerNoon</a> - 403kK followers</h3>

<p>HackerNoon is also another extremely popular publication. It is on Medium right now but it may not be there for long. They are going public with <a href="https://www.startengine.com/hackernoon">crowd sourcing</a>. From the content point of view, there is a sizable amount of content for software engineers. It also has lots of stories on cryptocurrencies. With 7 editors and 7K+ writers (includes me), this is a huge publication too. To write for them you need to send your draft to <a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#83;&#x74;&#111;&#x72;&#105;&#x65;&#x73;&#64;&#x41;&#x4d;&#x69;&#80;&#117;&#98;&#x6c;&#x69;&#99;&#x61;&#116;&#x69;&#x6f;&#x6e;&#x73;&#46;&#x63;&#111;&#x6d;&#x2e;">&#83;&#x74;&#111;&#114;&#105;&#101;&#x73;&#x40;&#65;&#77;&#x69;&#x50;&#x75;&#98;&#108;&#x69;&#99;&#x61;&#x74;&#105;&#111;&#x6e;&#115;&#46;&#x63;&#x6f;&#109;&#46;</a> The wait time for each story is 1 week or more (I have already published 5 stories). It also has a writer&rsquo;s group on Facebook. You can include yourself as a &ldquo;Contributing Writer&rdquo; on <a href="https://www.linkedin.com/company/hackernoon/">LinkedIn</a> too.</p>

<h3><a href="https://codeburst.io">CodeBurst.io</a> - 62K followers</h3>

<p>CodeBurst is a popular medium publication with contents focused on web development. With a motto of &ldquo;Bursts of code to power through your day&rdquo;. I  see most stories geared towards Javascript. They have a page encouraging &ldquo;<a href="https://codeburst.io/how-to-write-for-codeburst-io-63fec4bf111c">Write For Us</a>&rdquo;. They mention having over 2 million page views per month. With 2 Editors and more than 900 writers, this is not a small Medium publication. I am not sure of the editorial process and wait times as I have not tried to publish any of my stories here. It could be a good starting point for new writers.</p>

<h3><a href="https://itnext.io">ITNEXT.io</a> -  9.6K followers</h3>

<p>ITNEXT seems to cover a wider array of topics from DevOps to Javascript. It calls itself  &ldquo;a platform for IT developers &amp; software engineers to share knowledge, connect, collaborate, learn and experience next-gen technologies&rdquo;. It has a short and to the point &ldquo;Write for ITNEXT&rdquo; <a href="https://itnext.io/write-for-itnext-4dea1fd3adf">page</a> with enough details on how to submit a story to them. With 7 editors and 840+ writers, it is undoubtedly a growing publication I reckon.  I can&rsquo;t comment on the waiting time for a story to be published on this one too.</p>

<h3><a href="https://blog.bitsrc.io">Bits and Pieces</a> - 8.5K followers</h3>

<p>Bits and Pieces look like a pretty active tech medium publication. It has content covering topics like NodeJs, PHP and mobile development. With a motto of &ldquo;Coding In The Age Of Code Components&rdquo;. It somewhat lives up to it. It has detailed &ldquo;Write a post&rdquo; <a href="https://blog.bitsrc.io/how-to-write-a-post-for-bits-and-pieces-13de0133151b">page</a> which includes lots of examples. With 5 editors and more than 65 writers, it is an expanding publication. I think the barrier to entry should not be that high. The waiting time for a story to be published should be less as well.</p>

<h2>Popular Niche Ones</h2>

<p>I would like to mention some popular niche publications. First one is <a href="https://medium.com/dailyjs">DailyJs</a> with 89K followers have a &ldquo;Submit Your Story&rdquo; <a href="https://medium.com/dailyjs/how-to-submit-your-story-to-dailyjs-30f02b2d5287">page</a>. <a href="https://uxdesign.cc/">UX Collective</a> with 228K follower is also <a href="https://uxdesign.cc/submit-your-article-to-uxdesign-cc-abea95d3a1ba">calling for stories</a>. Last but not least, <a href="https://uxplanet.org/">UX Planet</a> having 173K followers also wants you to write for <a href="https://uxplanet.org/how-to-publish-your-content-on-ux-planet-fd9dc99756db">them</a>.</p>

<h2>Honorable Mention</h2>

<p>Though <a href="https://dev.to/">dev.to</a> is not a Medium publication but it surely deserves a place here.</p>

<blockquote><p>Currently the 11,357th website in the world, it has no editorial process.</p></blockquote>

<p>This makes it one of the most accessible website to write for that without doubts has a big audience. I got <a href="https://dev.to/geshan">2250+ followers</a> on Dev.to in less than 2 months having just 20 posts.</p>

<h2>Conclusion</h2>

<p>If you don&rsquo;t accentuate your skills and knowledge people are not going to know about them automatically. Start a blog and write posts for such popular platforms. It will give you that needed exposure. Start blogging!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 ways Docker changed the way software engineers work in past half decade]]></title>
    <link href="http://geshan.com.np/blog/2018/12/4-ways-docker-changed-the-way-software-engineers-work-in-past-half-decade/"/>
    <updated>2018-12-01T09:14:51+11:00</updated>
    <id>http://geshan.com.np/blog/2018/12/4-ways-docker-changed-the-way-software-engineers-work-in-past-half-decade</id>
    <content type="html"><![CDATA[<p>10 years back it was Git that transformed the way software engineers worked. Half a decade back it was <a href="https://www.docker.com/">Docker</a> that brought the container to the masses. Before Docker, container was like a sacred secret in companies like Google and Heroku. Docker is a software and a company too. It tried to build a broader ecosystem but <a href="https://kubernetes.io/">Kubernetes</a> stole the thunder along the way keeping <a href="https://docs.docker.com/engine/swarm/">swarm</a> at bay. This post is not about how some Docker tools are not popular. It is about how Docker has changed the way we work in the past 5 years.</p>

<p><img class="center" src="/images/4-ways-docker/docker-whale.jpg" title="&lsquo;4 ways Docker changed the way software engineers work in past half decade&rsquo; &lsquo;4 ways Docker changed the way software engineers work in past half decade&rsquo;" ></p>

<!-- more -->


<h2>TLDR;</h2>

<blockquote><p>With Docker, you ship the whole stack not only your code. Allocate minimum required resources to containers then scale them horizontally. With containers security generally already comes baked In. With Docker and Kubernetes you can get zero downtime and faster deployments leading to business profit.</p></blockquote>

<h2>Changed the ways</h2>

<p>If you want to go to the technical details of what is a container and why to use docker Google it :).</p>

<blockquote><p>Docker has also partially deprecated many of the configuration management tools.</p></blockquote>

<p>This post is about how Docker has changed the way we work after its release in March 2013. Below are some reasons that helped advance our way of working:</p>

<h3>Ship the whole stack, not just code</h3>

<p>With containers and Docker in specific, you always ship the whole stack in each version. The whole image gets rebuilt every time. It includes the precise OS+version, specific version of the language. It also has the dependencies like the framework and other libraries (versions depend on how you handle it). It also includes the code you have written and this results in a significant advantage. The advantage is, if it built correctly on your machine, it will potentially build on the server too. As soon as it runs it is the exact same environment on dev, staging, testing and even on production.</p>

<blockquote><p>It happens because you didn&rsquo;t shop only the code, you shipped your code + vendor code + specific language version + precise OS version too.</p></blockquote>

<h3>Allocate only needed resources to the application and scale horizontally</h3>

<p>With each Docker container, you can be specific about how much resources you want to allocate to that particular container. Using software like Kubernetes it becomes so much easier to scale your application. Under high load, the no. of containers can expand and with less load, it can shrink too. So with this mechanism, each container (or pod for Kubernetes) can be allocated the minimum resources and scaled horizontally as per need.</p>

<blockquote><p>For example, a simple Node JS app container/pod can run with like 128 MB memory and 0.25 CPU. As and when load increases run 5 pods in place of 2.</p></blockquote>

<p>This requires the application to be built with horizontal scalability in mind. That basically means storing no data on the file system. Treating containers like cattle, not pet helps scale horizontally. It also makes high availability of application an achievable task.</p>

<h3>Security is baked in</h3>

<p>Using a container, not virtual machine the attack surface is already decreased. Following container security best practices you can already improve your security measures. Of course, if you have holes in the application like SQL injection that is a different story. Still, with smaller and security-focused images like Alpine, it will be easier to get the basics right.</p>

<blockquote><p>Security is always about keeping the attack surface small. With containers and Docker closing more doors become easier.</p></blockquote>

<p>The container should have access to only what it needs. As the file system is temporary for containers it can be a security boon as well as a security auditing issue.</p>

<h3>Deploy faster with zero downtime</h3>

<p>Deploying Docker containers is always about shipping the whole stack. So the chances of one file not syncing or one server not getting the latest changes are not there. As a successful build of the image is always required to deploy it any problems will be found in the build process.</p>

<blockquote><p>With software like Kubernetes and Helm, orchestrating and deploying containers become straightforward. With High Availability (HA) in place using proper load balancing, deployments can be zero downtime.</p></blockquote>

<p>Easier and faster deployment equates to the ability to deploy smaller changes. Smaller changes done well can lead to a better response to market needs quickly. To sum up, use the right tools to deploy your containers in a way to use it for business advantage.</p>

<h2>Conclusion</h2>

<p>The past 5 years have seen rapid adoption of Docker. With tools like Kubernetes deploying and scaling applications has been much effortless than some years ago.</p>

<blockquote><p>Don&rsquo;t worship your virtual machines, use the resources it provides efficiently. Get on the Docker and containers train and reap its benefits.</p></blockquote>
]]></content>
  </entry>
  
</feed>
