<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: symfony | Geshan's Blog]]></title>
  <link href="https://geshan.com.np/blog/categories/symfony/atom.xml" rel="self"/>
  <link href="https://geshan.com.np/"/>
  <updated>2018-10-13T11:30:23+11:00</updated>
  <id>https://geshan.com.np/</id>
  <author>
    <name><![CDATA[Geshan Manandhar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Software Engineering Practices in Nepal Infographics Part 2 includes Git, VCS Hosting, Code Review Culture etc]]></title>
    <link href="https://geshan.com.np/blog/2015/05/software-engineering-practices-in-nepal-infographics-part-2-includes-git/"/>
    <updated>2015-05-22T12:40:58+10:00</updated>
    <id>https://geshan.com.np/blog/2015/05/software-engineering-practices-in-nepal-infographics-part-2-includes-git</id>
    <content type="html"><![CDATA[<p>I hope life is slowly going back to normal in Nepal though the news of aftershocks is not encouraging. My prayers are with the
people of Nepal and I hope they get the positive energy to resume with their normal work.</p>

<p>Below is the Part 2 of the Software Engineering Practices in Nepal Infographics. This time the graphical information covers
popularity of Versioin Control System (VCS), VCS hosting, Operating System (OS), Coding Standard, Code Reviews and other
interesting facts from the survey.</p>

<p>Again special thanks to <a href="http://bit.ly/ashish-singh-blog">Ashish Singh</a> for helping
me clean up and compile the data in a better way. And this time even <a href="http://bit.ly/ansu-blog">Ansubha Manandhar</a> rolled up
her sleeves and helped us group and compile the data into percentages, thank you for that.</p>

<p><strong>Data for this infographics is taken from this <a href="http://bit.ly/nep-dev-survey">survey</a>, I kindly request you to fill it.</strong></p>

<!-- more -->


<p><img class="center" src="/images/sw-eng-np-infographics-part02/Software_Engineering_Nepal_Mid_2015_Part02.png" title="&lsquo;Software Engineering Practices in Nepal Infographics Part 2&rsquo; &lsquo;Software Engineering Practices in Nepal Infographics Part 2&rsquo;" ></p>

<p>You can view this infographics in <a href="http://bit.ly/1R8EfHQ">interactive</a> mode too.</p>

<p><strong>If you enjoyed viewing the infographics, I again request to fill up the <a href="http://bit.ly/nep-dev-survey">survey</a> if you have not filled it up yet.</strong></p>

<blockquote><p>Thanks to everyone filling up the survey even in such conditions in Nepal.
I hope to get some more responses so that the next infographics in this series will have more data.
I will make the survey open till 2015 Q3 and post the final results in Oct 2015. #prayForNepal #stayStrongNepal #rebuildNepal</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering Practices in Nepal Infographics Part 1 includes Languages, Frameworks, IDEs etc]]></title>
    <link href="https://geshan.com.np/blog/2015/05/software-engineering-practices-in-nepal-infographics-part-1-includes-languages/"/>
    <updated>2015-05-17T22:26:29+10:00</updated>
    <id>https://geshan.com.np/blog/2015/05/software-engineering-practices-in-nepal-infographics-part-1-includes-languages</id>
    <content type="html"><![CDATA[<p>A big earthquake hit Nepal on 25-Apr-2015 and another big one was felt on 12-May-2015. The <a href="http://seismonepal.gov.np/">aftershocks</a> till now have been around 250. I pray that all the people in Nepal have the strength and positive energy to endure this difficult time. Rather than pitying on themselves, people have already started to work and this is a positive sign. Moreover, instead of spreading false news and rumors I would suggest people to focus on positive things, stay alert and cautious.</p>

<p>I had some time so I setup a survey to know the software engineering practices used in Nepal and in the past 2 weeks there are 90 responses from the survey.  Below is the first infographics in the series to showcase the software engineering practices used in Nepal ranging from Computer Languages, Project Management technique and software to Deployment practices.</p>

<p><strong>Data for this infographics is taken from this <a href="http://bit.ly/nep-dev-survey">survey</a>, I kindly request you to fill it.</strong></p>

<p>The Infographic below covers details of Language, Framework, IDE, Company Size, Male to Female Ratio and some other data extracted from the responses. A special thanks to <a href="http://bit.ly/ashish-singh-blog">Ashish Singh</a> for helping me clean up and compile the data in a better way.</p>

<!-- more -->


<p><img class="center" src="/images/sw-eng-np-infographics-part01/Software_Engineering_Nepal_Mid_2015_Part01.png" title="&lsquo;Software Engineering Practices in Nepal Infographics Part 1&rsquo; &lsquo;Software Engineering Practices in Nepal Infographics Part 1&rsquo;" ></p>

<p>You can view this infographics in <a href="http://bit.ly/1EPE37N">interactive</a> mode too.</p>

<p><strong>If you enjoyed viewing the infographics, I again request to fill up the <a href="http://bit.ly/nep-dev-survey">survey</a> if you have not filled it up yet.</strong></p>

<blockquote><p>Thanks to everyone filling up the survey even in such dire conditions in Nepal. I hope to get some more responses so that the next infographics in this series will have more data. #prayForNepal #stayStrongNepal</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Bundles to get started with REST in Symfony 2 and some tips]]></title>
    <link href="https://geshan.com.np/blog/2014/07/3-bundles-to-get-started-with-rest-in/"/>
    <updated>2014-07-18T16:55:00+10:00</updated>
    <id>https://geshan.com.np/blog/2014/07/3-bundles-to-get-started-with-rest-in</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">&#8220;I found out that you guys just build an amazing mobile app for your e-commerce venture, I heard you are using Symfony 2 for your back-end APIs. How did you make it that fast?&#8221; This is not very different that what I was asked some months back. The answer is we use a <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank">Service Oriented Architecture (SOA) </a>where all back-end service follow the REST architecture to communicate with all the clients. The client can be built in any language as longs a they can do HTTP calls. Lets look at what Symfony 2 bundles you can use to build a similar scalable, fast and cacheable REST APIs.<br /><br />I assume that you have some experience with Symfony 2 including how to use <a href="https://getcomposer.org/doc/00-intro.md" target="_blank">composer</a> to download dependent libraries/bundles.<br /><h2 style="text-align: left;">What is REST</h2>REST, short form for&nbsp;Representational state transfer is a resource based client and server communication protocol which is stateless and cacheable. It is an abstraction over HTTP communication where emphasis is given on uniform interface to make the communication structured and consistent. This <a href="http://www.restapitutorial.com/lessons/whatisrest.html" target="_blank">video</a> describes the constraints of REST and explains what it is or read a simpler <a href="http://rest.elkstein.org/2008/02/what-is-rest.html" target="_blank">one</a>.<!-- more --><br /><br />REST is a lightweight substitute to older ways of doing web services like <a href="http://en.wikipedia.org/wiki/Remote_procedure_call" target="_blank">Remote Procedure Call</a> (RPC) and <a href="http://en.wikipedia.org/wiki/SOAP" target="_blank">Simple Object Access Protocol</a> (SOAP). Basically communication in REST happens in light weight format like JSON which makes it fast.<br /><br />Describing REST involves having knowledge if the HTTP methods (verbs) like GET, POST, PUT, DELETE. Before proceeding further <a href="http://www.restapitutorial.com/lessons/httpmethods.html" target="_blank">knowing</a>&nbsp;what are they used for will be essential. There is also lots of fuss about <a href="http://www.restapitutorial.com/lessons/restfulresourcenaming.html" target="_blank">how to name resources</a> (and corresponding URIs) but rather than doing things by the book making it logical and practical can be the best solution.<br /><br /><h2 style="text-align: left;">RESTing With Symfony 2</h2><div><a href="http://symfony.com/" target="_blank">Symfony</a> is a very loosely coupled framework which has lots of useful components structured in easily plug-able bundles. Here are 3&nbsp;useful public Symfony 2 bundles for your next project using REST with Symfony.</div><h3 style="text-align: left;">FOSRestBundle</h3><div>The <a href="https://packagist.org/packages/FriendsOfSymfony/rest-bundle" target="_blank">FOSRestBundle</a> provides a solid foundation to start building RESTful services in Symfony 2. It can provide with automated routing for resources (probably doctrine entity if you use doctrine). It provides a very good base for a format (JSON/HTML/XML) independent view layer.&nbsp;</div><div><br /></div><div>If you want to be able to encode or decode multiple format <a href="https://github.com/FriendsOfSymfony/FOSRestBundle" target="_blank">FOSRestBundle</a> recommends using <a href="https://github.com/schmittjoh/JMSSerializerBundle" target="_blank">JMSSerializerBundle</a>. The serializer bundle is like glove on the hand with FOSRestBundle to give out response in JSON/HTML/XML. Please go through the <a href="https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> very well and for custom routing you can use Symfony routing and not the one provide by FOSRestBundle. It is one of the most popular bundles in <a href="http://knpbundles.com/best" target="_blank">KNPBundles</a> and has been downloaded more than 784K times.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-dSAVmuiGqgw/U8i7PyW6H6I/AAAAAAAA0ns/w7KSttIS_VE/s1600/fos-rest-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-dSAVmuiGqgw/U8i7PyW6H6I/AAAAAAAA0ns/w7KSttIS_VE/s1600/fos-rest-bundle.png" height="410" width="640" /></a></div><h3 style="text-align: left;">NelmioApiDocBundle</h3><div><a href="https://packagist.org/packages/nelmio/api-doc-bundle" target="_blank">NelmioApiDocBundle</a> is a boon when developing REST web services on Symfony2. The <a href="https://github.com/nelmio/NelmioApiDocBundle" target="_blank">bundle</a> enables clean documentation of all API end points by just using some structured annotation. There are at least 2 amazing benefits using this bundle, first you can give the link to the docs (generally /api/doc) to anyone who wants to implement the REST API you have created. Second while developing you can test your API with the sandbox feature provided by this useful bundle, if you use the annotations correctly linking the involved forms.</div><div><br /></div><div>Restricting sandbox with user access might be a good feature to add on on this bundle. Reading the full <a href="https://github.com/nelmio/NelmioApiDocBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> is highly encouraged. It is also a very popular bundle with 473K downloads till date.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-dPLuYKdnhWc/U8i9kyXe7cI/AAAAAAAA0n4/kUl3jGfiU3M/s1600/nelmio-api-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-dPLuYKdnhWc/U8i9kyXe7cI/AAAAAAAA0n4/kUl3jGfiU3M/s1600/nelmio-api-bundle.png" height="520" width="640" /></a></div><div><h3>LexikJWTAuthenticationBundle</h3><div>As discussed REST is stateless, so for authentication you have to opt for some mechanism that can be communicate with each request. You can go for something like <a href="http://oauth.net/" target="_blank">Oauth</a>&nbsp;or use JSON Web Signature (JWS). There is already a public bundle the&nbsp;<a href="https://packagist.org/packages/lexik/jwt-authentication-bundle" target="_blank">LexikJWTAuthenticationBundle</a> using the <a href="https://github.com/namshi/jose" target="_blank">JOSE</a> library built at Namshi. It is recommended that you read about JWS and JSON Web Token (JWT) before using this bundle. It can be used by putting the token as a cookie for each request.</div></div><div><br /></div><div>It will enable role based access to your API end points, lets say you want normal users to create users and only admin users to update/delete users that will be easily possible using this <a href="https://github.com/lexik/LexikJWTAuthenticationBundle" target="_blank">bundle</a> than trying to generate a time limited key or some other type of authentication. Yes, reading the <a href="https://github.com/lexik/LexikJWTAuthenticationBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> of the bundle will help you achieve the desired output.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-WL-v27TBctg/U8jEeA0dvPI/AAAAAAAA0oM/3n8Smx-h-KQ/s1600/jwt-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-WL-v27TBctg/U8jEeA0dvPI/AAAAAAAA0oM/3n8Smx-h-KQ/s1600/jwt-bundle.png" height="342" width="640" /></a></div><br /></div><div><br /></div><div>I hope these modules will come in handy when you start your REST Api with symfony. For more features and to leverage REST to the fullest you can take a look at&nbsp;<a href="https://github.com/willdurand/BazingaHateoasBundle" target="_blank">BazingaHateoasBundle</a>&nbsp;and&nbsp;<a href="https://github.com/hautelook/TemplatedUriBundle" target="_blank">TemplatedUriBundle</a>.</div><h2 style="text-align: left;">Other Tips</h2><div>Some other things you can consider when building a REST based API with Symfony 2 are:</div><div><ol style="text-align: left;"><li>Use the validation groups in Symfony 2 and keep all the validation conditions as annotation in the Entity itself than at multiple places.</li><li>Keep the handing of forms central, though you will not show any HTML forms for the purpose of validation use the Symfony forms on top of the entities and link them to controllers which expose the end points.</li><li>Use the HTTP status code wisely like when a resource is created its not 200 OK its 201 Created, when you are paging results 206 will make for sense and if the user sent bad data 400 Bad Request is better.</li><li>&nbsp;Think how will you version your API early when you develop your API if today you use /api/V1 how will you use api/V2 and what will be its consequences.</li><li>Last but not he least be liberal on what you accept and strict on what you give out.</li></ol><div><blockquote>All in all Symfony is a great framework and doing REST in Symfony though not a piece of cake but is challenging yet rewarding.&nbsp;</blockquote></div></div></div></div>

]]></content>
  </entry>
  
</feed>
