<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Geshan's Blog]]></title>
  <link href="http://geshan.com.np/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://geshan.com.np/"/>
  <updated>2018-09-29T17:33:06+10:00</updated>
  <id>http://geshan.com.np/</id>
  <author>
    <name><![CDATA[Geshan Manandhar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Use Docker Compose With Virtual Hosts and Shared Services (Like Db) for Dev Environment]]></title>
    <link href="http://geshan.com.np/blog/2017/05/how-to-use-docker-compose-with-virtual-hosts-and-services-like-db-for-dev-environment/"/>
    <updated>2017-05-25T00:53:04+10:00</updated>
    <id>http://geshan.com.np/blog/2017/05/how-to-use-docker-compose-with-virtual-hosts-and-services-like-db-for-dev-environment</id>
    <content type="html"><![CDATA[<p>Docker as been immensely popular in the past years. If you are not using docker at least in your dev environment in 2017.
You are surely missing out on some great advantages. Your new software engineer should start writing production-ready code
in a matter of hours not days. All thanks to docker.  Along the same lines, this post will cover how you can set up
docker for your dev environment with least friction and maximum productivity. It is an opinionated post. We migrated to this <code>external_links</code>
<a href="https://docs.docker.com/compose/compose-file/#externallinks">approach</a> so that we could run multiple projects/microservices that use the same db/services shared among them.</p>

<p><img class="center" src="/images/docker-compose-vhost/docker-compose-vhost.jpg" title="&lsquo;Docker compose with vhost and shared services&rsquo; &lsquo;Docker compose with vhost and shared services&rsquo;" ></p>

<!-- more -->


<h2>Context</h2>

<ul>
<li>This tutorial is generally agnostic of docker and docker-compose versions (I am using docker compose 1 syntax). I assume you have docker and docker-compose installed and know about them.</li>
<li>It uses external images like Nginx proxy for virtual host per project. Mysql db as shared external service. It could also have been mongo or redis or even rabbit mq. The main point is to use it as <code>external_link</code> in the docker compose file, so that it can be shared among projects.</li>
<li>It uses a demo app which emulates the page visit/hit counter popular decades back with a <a href="https://github.com/geshan/counter/blob/master/index.js">~30 liner Nodejs app</a> and Mysql db.</li>
<li>I would like to keep the description as concise as possible and in points to make it simple and clear. You should read the code of <a href="https://github.com/geshan/counter">sample counter project</a> and sample mysql container&rsquo;s <a href="https://github.com/geshan/sample-mysql/blob/master/docker-compose.yml">docker-compose.yml</a> well.</li>
<li>The goal is to grasp the concepts well and apply it to your current project. For example, you could start with replacing your local mysql install with a docker container.</li>
</ul>


<h2>Problems to solve</h2>

<ol>
<li>After I use docker and docker compose, the web server (nginx/apache etc) of project A takes up port 80 and I can&rsquo;t run project B on port 80 or have a virtual host for both projects.</li>
<li>When I use my db (mysql/postgres) as a service in my docker compose for project A, It is cumbersome to use the same db for another project as its coupled with project A.</li>
<li>I just want to run my mysql database, import some data and run some queries. I don&rsquo;t want to run my app for now.</li>
</ol>


<h2>Solution goals</h2>

<ol>
<li>To make services like db etc independent of projects and shared among projects similar to having a local install of mysql with multiple databases.</li>
<li>Multiple projects should be able to run in parallel and each of them will have their own virtual host for easy accessibility.</li>
</ol>


<h2>Steps</h2>

<ol>
<li>Run the Nginx proxy to enable virtual hosts with <code>$ docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy</code></li>
<li>Add <code>127.0.0.1 counter.local.dev</code> to your hosts file (on unix based system it is <code>/etc/hosts</code> file)</li>
<li>Create an empty folder db in your home (<code>~/db</code>), to save your mysql data</li>
<li>Clone mysql repo from <a href="https://github.com/geshan/sample-mysql">here</a> maybe at <code>~/projects/mysql</code></li>
<li>In <code>~/projects/mysql</code> run docker-compose up to run mysql, it will create <a href="https://github.com/geshan/sample-mysql/blob/master/init-dump/counter.sql">counter db, counts table with one row</a>.</li>
<li>Clone the sample counter app from <a href="https://github.com/geshan/counter">here</a> to maybe <code>~/projects/counter</code>.</li>
<li>In <code>~/projects/counter</code> run <code>docker-compose up</code></li>
<li>Then go to <code>http://counter.local.dev</code> on your browser you should see <code>Page visited 1 times</code>, refresh it, it should say <code>Page visited 2 times</code></li>
</ol>


<p><img class="center" src="/images/docker-compose-vhost/page-visited.png" title="&lsquo;All working you should see this&rsquo; &lsquo;All working you should see this&rsquo;" ></p>

<p>Virtual host has been possible in above setup as we ran the nginx proxy and configured <code>VIRTUAL_HOST</code> and <code>VIRTUAL_PORT</code> parameters correctly
in the docker-compose.yml of the sample counter project. Mysql was already running before the project even started to run and it was <code>external_links</code>,
the IP of the mysql container was automatically added to the <code>/etc/hosts</code> of the counter project container which enabled us to use the host for mysql db
as <a href="https://github.com/geshan/counter/blob/master/index.js#L4">mysql</a> in the connection config we passed to the mysql library.</p>

<p>Steps for running dependent services like nginx proxy, mysql can surely be automated for speed and efficiency.</p>

<h2>Takeaways</h2>

<ol>
<li>You can plan a step by step migration like first get your db/queue migrated from local install to docker then the app.</li>
<li>Use <code>external_links</code> for all the services like db/queue/redis/solr anything that needs to be shared among projects.</li>
<li>Use <a href="https://github.com/jwilder/nginx-proxy">nginx proxy</a> to enable virtual host per project with two simple env variables <code>VIRTUAL_HOST</code> and <code>VIRTUAL_PORT</code> in the project&rsquo;s <a href="https://github.com/geshan/counter/blob/master/docker-compose.yml#L8-L9">docker-compose</a> file. <code>VIRTUAL_PORT</code> is 8080 because application is <a href="https://github.com/geshan/counter/blob/master/index.js#L27">running</a> on port 8080 and same port is exposed from the <a href="https://github.com/geshan/counter/blob/master/Dockerfile#L10">dockerfile</a>.</li>
<li>Run all your dependencies before hand and then run <code>docker-compose up</code> on your project(s). Dependencies can be run with <code>docker-compose up -d</code> to put it in the background. You can use <code>docker-compose -f logs</code> to follow logs and check if the service is running fine.</li>
<li>In this way, you can run multiple projects sharing the same db instance and each project can have its own virtual host.</li>
</ol>


<blockquote><p>Hope you found this helpful. For more clarity, please read the <a href="https://github.com/geshan/counter/blob/master/Dockerfile">Dockerfile</a>, <a href="https://github.com/geshan/counter/blob/master/docker-compose.yml">docker-compose.yml</a> and <a href="https://github.com/geshan/counter/blob/master/index.js">index.js</a> of the sample counter project thoroughly.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Laravel, MariaDB (MySQL) and Docker, Docker Compose]]></title>
    <link href="http://geshan.com.np/blog/2015/10/getting-started-with-laravel-mariadb-mysql-docker/"/>
    <updated>2015-10-24T18:49:48+11:00</updated>
    <id>http://geshan.com.np/blog/2015/10/getting-started-with-laravel-mariadb-mysql-docker</id>
    <content type="html"><![CDATA[<p>&ldquo;How do I get new team members contributing code to the project in a matter of minutes/hours not days?&rdquo; is a common question heard in development teams. There are some ways to do, in my opinion <a href="http://docker.com">docker</a> is one of the best.</p>

<p>Docker enables using same software stack in development, staging and production. You don&rsquo;t need to worry about the version of PHP, MYSQL or any other dependency with Docker. This post will be about Laravel and MariaDB (MySQL) with Docker for local development. It will also feature use of docker-compose. We will use PHP 5.6 and MariaDB 10.1 with Laravel 5.1.</p>

<p><img class="center" src="/images/laravel-mysql-docker/laravel-mysql-docker.png" title="&lsquo;Getting started with Laravel, MariaDB (MySQL) and docker, docker compose&rsquo; &lsquo;Getting started with Laravel, MariaDB (MySQL) and docker, docker compose&rsquo;" ></p>

<!-- more -->


<h2>Prerequisites</h2>

<ul>
<li>You are aware about docker and is basic usage. If you are new to docker check an <a href="http://bit.ly/1LsQ4X6">introduction screen-cast</a>) or read this <a href="http://bit.ly/1FVjL0k">Docker for PHP Developers</a> post</li>
<li>You know about docker volumes and linking containers with docker-compose.</li>
<li>You are running Laravel 5.x on your local machine with some PHP and MySQL setup. The setup can be local LEMP stack or XAMPP or something similar.</li>
<li>You have docker and <a href="https://docs.docker.com/compose/install/">docker compose</a> installed on your machine</li>
<li>You have stopped your Apache/Nginx service and MYSQL service. It will free port 80 and 3306. If
you are using vagrant and homestead then you can run Laravel without starting it.</li>
</ul>


<h2>Software Versions used</h2>

<p>I am running this example on Ubuntu 14.04.2 LTS.</p>

<ul>
<li>Docker : 1.7.1 (<a href="https://docs.docker.com/installation/">Installation Instructions</a>)</li>
<li>Docker compose : 1.3.1 (<a href="https://docs.docker.com/compose/install/">Installation Instructions</a>)</li>
</ul>


<h2>Why use docker?</h2>

<p>The reasons to use docker are simiar to <a href="http://geshan.com.np/blog/2014/07/getting-started-with-php-lemp-on-vagrant/">vagrant</a>. There are some more compelling reasons to use docker and docker compose, some of them are:</p>

<h3>Quick setup of development environment</h3>

<p>The developer/software engineer does not need to know which version of PHP or MySQL is in use. All s/he needs to do is <code>docker-compose up</code> and wait for the images to download (around 230 MB). After that add a entry to the /etc/hostsfile like <code>echo 127.0.0.1 project-name.dev &gt;&gt; /etc/hosts</code>. Then the project runs at <code>http://project-name.dev</code> on the browser.</p>

<h3>No need to install software on local machine</h3>

<p>With docker containers applications are self sufficient. There is no need to upgrade to the latest version of PHP or MySQL. The right version is already packaged inside the dockerfile and also in the container. There is no problem of one developer running PHP 5.5 and another one running PHP 5.6. All developers run the same container. You can install PHP to run composer and other scripts.</p>

<h3>Same software stack in all environments</h3>

<p>Same docker container can be deployed to staging or production environments. The same software stack with correct software versions is used across environments. For example the problem of one developer using MySQL 5.6 and staging running MySQL 5.5 ends.</p>

<p>A <a href="https://github.com/jwilder/nginx-proxy">NGINX proxy</a> can be used to make the virtual hosts dynamic. This post is about keeping things simple.</p>

<h2>Steps to running Laravel 5.x with MariaDB (MySQL) with docker</h2>

<p>For this example I will use docker images with <a href="https://hub.docker.com/_/alpine/">Alpine Linux</a> base images. Alpine image is just 5 MB which makes it the best candidate for docker base images. We will use PHP version 5.6 and MariaDB version 10.1. MariaDB is a drop in replacement of MySQL and for Alpine only MariaDb is available. The example git repo for this blog post is available on <a href="https://github.com/geshan/laravel-mysql-docker">github</a>.</p>

<h3>Install Laravel 5.1 on local machine</h3>

<p>Run the following command:</p>

<pre><code>composer create-project laravel/laravel --prefer-dist laravel-mysql-docker
</code></pre>

<p>I installed it on <code>~/Projects/misc/laravel-mysql-docker</code></p>

<h3>Add larael-docker.dev to /etc/hosts</h3>

<p>While it is downloading Laravel add <code>127.0.0.1 larave-docker.dev</code> to your <code>/etc/hosts</code> file. It can be
done quickly with the command below:</p>

<pre><code>sudo echo '120.0.0.1 laravel-docker.dev' &gt;&gt; /etc/hosts
</code></pre>

<h3>Setup docker images with docker-compose</h3>

<p>We will use <a href="https://github.com/dydx/alpine-nginx-php-mariadb">dydx/alpine-nginx-php-mariadb</a> and modify it to suit our needs. It is a docker replacement for homestead. Both docker images are based on Alpine Linux which makes it small. Create the following <code>docker-compose.yml</code> file on root of the project:</p>

<pre><code>front:
  image: dydx/alpine-nginx-phpfpm
  ports:
    - "80:80"
  volumes:
    - .:/var/www
    - docker/nginx/sites-enabled:/etc/nginx/sites-enabled
  links:
    - mysql:mysql

mysql:
  image: dydx/alpine-mariadb
  ports:
    - "3306:3306"
  volumes:
    - docker/db/data:/var/lib/mysql
</code></pre>

<ul>
<li>We are using dydx/alpine-nginx-phpfpm image named as front, it has PHP Nginx 1.8 and PHP-FPM.</li>
<li>It uses supervisor to keep nginx and PHP-FPM running.</li>
<li>We copy the all the files in current folder inside docker at <code>/var/www</code> to execute it.</li>
<li>Other volumes are there to override the sites-enabled with virtual host and supervisor config to fix an error.</li>
<li>The second definition is MySQL for which the data is saved in ./docker/db/data folder.</li>
<li>The front container links the MySQL (MariaDB) container with the name <code>mysql</code></li>
</ul>


<h3>Create needed folders</h3>

<p>In project root create the following folders:</p>

<pre><code>./docker
./docker/db
./docker/nginx
./docker/nginx/sites-enabled
</code></pre>

<p>All MYSQL/MariaDB data that would generally be stored in <code>/var/lib/mysql</code> will be linked as volume from <code>./docker/db</code>.
This is done as docker containers don&rsquo;t have data persistence. This will keep the MySQL data persisted on the host machine which will be reused when the MySQL/MariaDB container is restarted. The folder structure should
be like below:</p>

<p><img class="center" src="/images/laravel-mysql-docker/folder-structure.png" title="&lsquo;Laravel, MariaDB (MySQL) and docker, docker compose folder structure&rsquo; &lsquo;Laravel, MariaDB (MySQL) and docker, docker compose folder structure&rsquo;" ></p>

<h3>Create default sites-enabled</h3>

<p>Create a file named <code>default</code> on <code>./docker/nginx/sites-enabled</code> like below:</p>

<pre><code>server {
  server_name laravel-docker.dev;
  root        /var/www/public;
  index       index.php;

  client_max_body_size 100M;
  fastcgi_read_timeout 1800;

  location / {
    try_files $uri $uri/ /index.php$query_string;
  }

  location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
    expires       max;
    log_not_found off;
    access_log    off;
  }

  location ~ \.php$ {
    try_files     $uri =404;
    include       fastcgi_params;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_pass  127.0.0.1:9000;
  }
}
</code></pre>

<h3>Run Docker compose up</h3>

<p>Now give you are in the project root, you can run <code>docker-compose up</code> to build and run the containers.
Wait for the containers to download. You can do more customization if you create your own image and do a
docker-compose build to build the images.</p>

<p>After you run docker-compose up you will see output like below:</p>

<p><img class="center" src="/images/laravel-mysql-docker/docker-compose-up.png" title="&lsquo;Laravel, MariaDB (MySQL) and docker, docker compose up output&rsquo; &lsquo;Laravel, MariaDB (MySQL) and docker, docker compose up output&rsquo;" ></p>

<h3>Fix permissions</h3>

<p>The containers are up still as the cache and logs are not writable it will hit a 500 Internal server
error. To fix this use the following command to relax the file permissions inside the container in a
new console tab.</p>

<pre><code>docker exec -it laravelmysqldocker_front_1 chmod 0777 /var/www/storage -R
</code></pre>

<p>or it can be done locally too with the following command:</p>

<pre><code>chmod 0777 /var/www/storage -R
</code></pre>

<p>If you want to run your artisan commands you can run them inside the front container. Hit the command below:</p>

<pre><code>docker exec -it laravelmysqldocker_front_1 /bin/sh
</code></pre>

<p>You will get the shell of the front container then do <code>cd /var/www</code> and <code>php artisan</code> all your artisan commands are there.</p>

<h3>Access <a href="http://http://laravel-docker.dev">http://http://laravel-docker.dev</a></h3>

<p>You should be able to load Laravel in the browser now navigating to <code>http://laravel-docker.dev</code>. Here you can see the Laravel 5 default page loading.</p>

<h2>MySQL Settings</h2>

<p>You can check if MySQL/MariaDB is running by logging into MySQL locally with:</p>

<pre><code>mysql -uhomestead -psecret homestead
</code></pre>

<p>This will connect to you local port 3306 and you can see that mysql is working. You can even use tools like
MySQL workbench to verify that MySQL is working fine.</p>

<p>From the container when you connect to MySQL the <code>DB_HOST</code> is not localhost anymore it should be <code>mysql</code> (as set in docker-compose.yml file) and you are all set to use MySQL. As an example have a look at the db part of .env file I used:</p>

<pre><code>DB_HOST=mysql
DB_DATABASE=homestead
DB_USERNAME=homestead
DB_PASSWORD=secret
</code></pre>

<p>The easiest way to verify if Laravel is talking to MySQL/MariaDb correctly is just run the following command:</p>

<pre><code>docker exec -it laravelmysqldocker_front_1 /bin/sh

## you will be inside the front container now

cd /var/www/

php artisan migrate
</code></pre>

<p>Then you will see some messages like below:</p>

<pre><code>Migration table created successfully.
Migrated: 2014_10_12_000000_create_users_table
Migrated: 2014_10_12_100000_create_password_resets_table
</code></pre>

<p>Now run the following queries on MySQL/MariaDb via the cli client or some other client like MySQL Workbench.</p>

<pre><code>use homestead;
describe users;
</code></pre>

<p>You will get an output like below:</p>

<p><img class="center" src="/images/laravel-mysql-docker/users-table.png" title="&lsquo;Laravel, MariaDB (MySQL) and docker, docker compose users table&rsquo; &lsquo;Laravel, MariaDB (MySQL) and docker, docker compose users table&rsquo;" ></p>

<h3>Stop docker containers</h3>

<p>You have seen that docker is running from the containers. To stop your containers you should run:</p>

<pre><code>docker-compose stop
</code></pre>

<p>on the project root and it will stop the containers like below:</p>

<p><img class="center" src="/images/laravel-mysql-docker/docker-compose-stop.png" title="&lsquo;Laravel, MariaDB (MySQL) and docker, docker compose stop output&rsquo; &lsquo;Laravel, MariaDB (MySQL) and docker, docker compose stop output&rsquo;" ></p>

<h2>Next Steps</h2>

<p>You can carry on using the docker containers to replace your local Apache/Ngnix and MySQL. You can develop your Laravel applicaiton with ease using docker and docker compose.</p>

<h2>Conclusion</h2>

<blockquote><p>You can use this analogy that containers are cattle and virtual machines (VMs) are pets.</p></blockquote>

<p>Creating, deleting and reconstructing the containers should be easy, fast and seamless than VMs.
If you want to speed up your development flow and help other team members contribute faster to the project
opt for docker and docker-comopse. Happy Dockerizing and coding Laravel + PHP!</p>
]]></content>
  </entry>
  
</feed>
