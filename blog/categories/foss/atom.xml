<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Foss | Geshan's Blog]]></title>
  <link href="http://geshan.com.np/blog/categories/foss/atom.xml" rel="self"/>
  <link href="http://geshan.com.np/"/>
  <updated>2018-09-29T17:33:06+10:00</updated>
  <id>http://geshan.com.np/</id>
  <author>
    <name><![CDATA[Geshan Manandhar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Things to Do for Your Open Source PHP Projects, a Checklist]]></title>
    <link href="http://geshan.com.np/blog/2015/07/5-things-to-do-for-your-open-source-php-projects/"/>
    <updated>2015-07-18T13:01:00+10:00</updated>
    <id>http://geshan.com.np/blog/2015/07/5-things-to-do-for-your-open-source-php-projects</id>
    <content type="html"><![CDATA[<p>Open source software (oss) are very popular in the software world, be it the server serving your web pages or the
language/framework your website/webapp or even mobile app is written on, it is highly likely that its based on an
open source software. As programmers this sprint of giving back to the community and helping others in form of
Free and open source software is amazing. There are many open source PHP projects as well from frameworks to small
libraries. It is a difficult yet rewarding experience to lead/support an open source project. If you are thinking
of starting an open source project or open sourcing some part(s) of your existing system, this post has a checklist
to assist you with it.</p>

<p><img class="center" src="/images/php-oss-checklist/example-foss.png" title="&lsquo;An example open source php project&rsquo; &lsquo;Example open source project&rsquo;" ></p>

<!-- more -->


<h2>Intro</h2>

<p>It is taken for granted that you do the basics correctly like having a optimally descriptive readme, a license and
probably a contribution guide on your project&rsquo;s Github repo. It is also assumed that as its PHP you are doing the
basis right following <a href="http://www.php-fig.org/">FIG</a>&rsquo;s PSR standards like
<a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md">PSR-2</a> coding style guide
and <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md">PSR-4</a> auto-loader standard.
For this post I will use a template/boilerplate <a href="https://github.com/geshan/dataprovider-example">dataprovider-example</a>
as and example, the links will open for this project for services mentioned below. So after getting the basics
right what more do you need to consider, lets have a look at the checklist:</p>

<h2>1. Check and maintain Code Quality</h2>

<p>Just writing code that works might not be ideal for an open source project, also because the code you write can be read by
anyone and used by anyone checking coding standard and code quality become a must. If you want to check your
coding standard you can do it locally with <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP Code Sniffer</a>,
fix coding standard issues with <a href="http://cs.sensiolabs.org/">PHP CS Fixer</a>. For other local tools you can check <a href="http://phpqatools.org/">PHP QA tools</a>.
In case you want a continuous integration service you can use <a href="https://styleci.io/">Style CI</a> which will check your coding
standard matches PSR-2 or not on each push. It is free for open source projects.</p>

<p>In case of the code quality, there are many providers to choose from and again all of them are free to use for open
source projects. They love open source software as we do too. Below is the list of some providers I have used/tried out:</p>

<ul>
<li><a href="https://codeclimate.com/github/geshan/pdepend-analyzer">CodeClimate</a> - Very good service, ranks your code in a GPA of 4. Has good code analysis and reports.</li>
<li><a href="https://scrutinizer-ci.com/g/geshan/dataprovider-example/">Scrutinizer CI</a> - Great code analysis, ranks your code in a scale of 10. Extensive settings and code reports.</li>
<li><a href="https://insight.sensiolabs.com/projects/56ff09b2-7954-4cb2-a6da-6af863775107">Sensiolabs Insight</a> - Great code analysis, ranks your code with medals. Quite extensive code reports.</li>
<li><a href="https://www.codacy.com/app/geshan/dataprovider-example/dashboard">Codacy</a> - Good code analysis, ranks your code with A, B, C, D scale. Good settings and code reports.</li>
</ul>


<p>As an example I am using a project with just 2 PHP files so you can see how powerful and deep the analysis for the code is
for each of the above services. Which one to choose from the above, the choice is yours :)</p>

<h2>2. Write Tests</h2>

<p>Writing tests for code is also important to verify that the code does what you expect and intend it to do. As generally
open source projects are libraries Unit tests is recommended more than functional/integration tests. You can
see an example test <a href="https://github.com/geshan/dataprovider-example/blob/master/tests/DataProvider/Example/Test/CheckoutTest.php">here</a>.
Below are the two main choices of framework you have for writing tests depending on the style of testing:</p>

<ul>
<li><a href="https://phpunit.de/">PHPUnit</a> - The most popular PHP test framework, you can use it for a Test Driven Development approach.</li>
<li><a href="http://www.phpspec.net/">PHPSpec</a> - The new emerging concept which some say are better than PHPunit, follows Behavior Driven Development approach.</li>
</ul>


<p>Well the question is always there do you write test first or code first, IMHO whatever you do have tests that cover your
code for the cases you know and you think are important.</p>

<h2>3. Enable Continuous Integration</h2>

<p>Just writing tests will not be enough if it does not run on each push to the version control system (VCS) like git. So
if you get fast feedback on what your new code did to the existing or new tests that would be very helpful to decide if
your code in form of a Pull Request (PR) can be merged to the main branch (generally master). It is very important for
open source so as to maintain stability and not break the application of anyone using your open source code. Bonus
points if you submit the code coverage report to above mentioned code analysis services. Here too
you have mainly 2 choices both of them are free for open source projects:</p>

<ul>
<li><a href="https://travis-ci.org/geshan/dataprovider-example">Travis CI</a> - The most popular continuous integration, fast and easy to integrate with any project.</li>
<li><a href="https://shippable.com">Shippable CI</a> - A new player based on docker. Good and easy to integrate but can&rsquo;t show test runs even for open source projects.</li>
</ul>


<p>There are lots of other CI services these days and most of them are free for open source projects, still I think Travis
makes a good choice for open source projects. The decision is yours again.</p>

<h2>4. Publish to Packagist with sermver</h2>

<p>OK so you have setup a git repo and done all the above mentioned things. Next logical step will be to submit your open
source PHP project to <a href="https://packagist.org/packages/data-provider/example">Packagist</a>. It is supported by <a href="https://getcomposer.org/">Composer</a>
php package manager and has as of writing has more than <a href="https://packagist.org/statistics">64650</a> open source projects.
You will need to <a href="https://packagist.org/packages/submit">register</a> and have a well
formatted <a href="https://github.com/geshan/dataprovider-example/blob/master/composer.json">composer.json</a> in your git
repository to submit your package to Packagist. After you submit your project, any one looking for something similar like
your project and search for your package and download it using composer. For clarity in version do use Semantic
Versioning a.k.a <a href="http://semver.org/">SemVer</a>.</p>

<h2>5. Issue board with HuBoard</h2>

<p>Finally your project is being downloaded and used by other people and you are getting requests in form of issues to
make changes or add features. Other generous and talented programmers are sending PRs to your project but how do you
show what is being done and reflect on status of the project issues visually. Here is where
<a href="https://huboard.com/geshan/dataprovider-example/">HuBorad</a> comes to
your rescue. You can show the status of the issues as below to make all the interested people clear of what is happening
in the form of a Agileish Kanban board:</p>

<p><img class="center" src="/images/php-oss-checklist/huBoard.png" title="&lsquo;An example of issues on HuBoard&rsquo; &lsquo;Example of issues on HuBoard&rsquo;" ></p>

<h2>Conclusion</h2>

<p>After checking all the items in the above checklist, be sure to be alert about issues and pull requests for the open source
project. Successful open source project lead/members are quite alert and responsive to both issues created and pull requests
sent to the project. You can use the data-provider example as a base template for writing your next open source project. Happy Coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering Practices in Nepal Infographics Part 2 Includes Git, VCS Hosting, Code Review Culture Etc]]></title>
    <link href="http://geshan.com.np/blog/2015/05/software-engineering-practices-in-nepal-infographics-part-2-includes-git/"/>
    <updated>2015-05-22T12:40:58+10:00</updated>
    <id>http://geshan.com.np/blog/2015/05/software-engineering-practices-in-nepal-infographics-part-2-includes-git</id>
    <content type="html"><![CDATA[<p>I hope life is slowly going back to normal in Nepal though the news of aftershocks is not encouraging. My prayers are with the
people of Nepal and I hope they get the positive energy to resume with their normal work.</p>

<p>Below is the Part 2 of the Software Engineering Practices in Nepal Infographics. This time the graphical information covers
popularity of Versioin Control System (VCS), VCS hosting, Operating System (OS), Coding Standard, Code Reviews and other
interesting facts from the survey.</p>

<p>Again special thanks to <a href="http://bit.ly/ashish-singh-blog">Ashish Singh</a> for helping
me clean up and compile the data in a better way. And this time even <a href="http://bit.ly/ansu-blog">Ansubha Manandhar</a> rolled up
her sleeves and helped us group and compile the data into percentages, thank you for that.</p>

<p><strong>Data for this infographics is taken from this <a href="http://bit.ly/nep-dev-survey">survey</a>, I kindly request you to fill it.</strong></p>

<!-- more -->


<p><img class="center" src="/images/sw-eng-np-infographics-part02/Software_Engineering_Nepal_Mid_2015_Part02.png" title="&lsquo;Software Engineering Practices in Nepal Infographics Part 2&rsquo; &lsquo;Software Engineering Practices in Nepal Infographics Part 2&rsquo;" ></p>

<p>You can view this infographics in <a href="http://bit.ly/1R8EfHQ">interactive</a> mode too.</p>

<p><strong>If you enjoyed viewing the infographics, I again request to fill up the <a href="http://bit.ly/nep-dev-survey">survey</a> if you have not filled it up yet.</strong></p>

<blockquote><p>Thanks to everyone filling up the survey even in such conditions in Nepal.
I hope to get some more responses so that the next infographics in this series will have more data.
I will make the survey open till 2015 Q3 and post the final results in Oct 2015. #prayForNepal #stayStrongNepal #rebuildNepal</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering Practices in Nepal Infographics Part 1 Includes Languages, Frameworks, IDEs Etc]]></title>
    <link href="http://geshan.com.np/blog/2015/05/software-engineering-practices-in-nepal-infographics-part-1-includes-languages/"/>
    <updated>2015-05-17T22:26:29+10:00</updated>
    <id>http://geshan.com.np/blog/2015/05/software-engineering-practices-in-nepal-infographics-part-1-includes-languages</id>
    <content type="html"><![CDATA[<p>A big earthquake hit Nepal on 25-Apr-2015 and another big one was felt on 12-May-2015. The <a href="http://seismonepal.gov.np/">aftershocks</a> till now have been around 250. I pray that all the people in Nepal have the strength and positive energy to endure this difficult time. Rather than pitying on themselves, people have already started to work and this is a positive sign. Moreover, instead of spreading false news and rumors I would suggest people to focus on positive things, stay alert and cautious.</p>

<p>I had some time so I setup a survey to know the software engineering practices used in Nepal and in the past 2 weeks there are 90 responses from the survey.  Below is the first infographics in the series to showcase the software engineering practices used in Nepal ranging from Computer Languages, Project Management technique and software to Deployment practices.</p>

<p><strong>Data for this infographics is taken from this <a href="http://bit.ly/nep-dev-survey">survey</a>, I kindly request you to fill it.</strong></p>

<p>The Infographic below covers details of Language, Framework, IDE, Company Size, Male to Female Ratio and some other data extracted from the responses. A special thanks to <a href="http://bit.ly/ashish-singh-blog">Ashish Singh</a> for helping me clean up and compile the data in a better way.</p>

<!-- more -->


<p><img class="center" src="/images/sw-eng-np-infographics-part01/Software_Engineering_Nepal_Mid_2015_Part01.png" title="&lsquo;Software Engineering Practices in Nepal Infographics Part 1&rsquo; &lsquo;Software Engineering Practices in Nepal Infographics Part 1&rsquo;" ></p>

<p>You can view this infographics in <a href="http://bit.ly/1EPE37N">interactive</a> mode too.</p>

<p><strong>If you enjoyed viewing the infographics, I again request to fill up the <a href="http://bit.ly/nep-dev-survey">survey</a> if you have not filled it up yet.</strong></p>

<blockquote><p>Thanks to everyone filling up the survey even in such dire conditions in Nepal. I hope to get some more responses so that the next infographics in this series will have more data. #prayForNepal #stayStrongNepal</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Git Tips Beyond the Basics]]></title>
    <link href="http://geshan.com.np/blog/2014/07/4-git-tips-beyond-basics/"/>
    <updated>2014-07-28T16:23:00+10:00</updated>
    <id>http://geshan.com.np/blog/2014/07/4-git-tips-beyond-basics</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">What is common between Google, Facebook, Microsoft, Twitter and Linked in? If you are looking for the answer its <a href="http://git-scm.com/" target="_blank">Git</a>&nbsp;the Distributed Version Control System (DVCS) that has simplified software revision control. Its major <a href="http://git-scm.com/about" target="_blank">features</a> are speed and performance combined with ease of use provided you know the basic git concepts.<br /><br />If you are new to git you should read some <a href="http://geshan.blogspot.ae/2012/02/git-introduction-and-hand-on-usage.html" target="_blank">getting started</a> tutorials or if you have used SVN you should read <a href="http://git-scm.com/book/en/Git-and-Other-Systems-Migrating-to-Git" target="_blank">migrating to git</a>. For the audience of this post, I assume that you are already using git for some time and are familiar with concepts like commit, push a branch, pull changes from remote repository, merging a branch to &#8220;master&#8221; and similar daily things that git users normally do.<br /><br />Git is a lot more popular than SVN or Mercurial. If you take check Google trends in the past 5 years (July 2009 - July 2014) in Internet and Telecom category, git it twice or move as popular as the other two:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-MYWJgIxDJRo/U9Xant4rMHI/AAAAAAAA0rM/6e3mV34bYX0/s1600/git-vs-svn-vs-mercurial.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-MYWJgIxDJRo/U9Xant4rMHI/AAAAAAAA0rM/6e3mV34bYX0/s1600/git-vs-svn-vs-mercurial.png" height="452" width="640" /></a></div><!-- more --><h2 style="text-align: left;">More on Git</h2><div>I started using git in early 2009, then I has little experience with SubVersion (SVN) and git was a refreshing change to slow and difficult SVN. At that time, we did not do much branching or follow the <a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank">git flow</a>&nbsp;branching model.<br /><br />I rediscover the power of Git in 2012 when I joined <a href="http://www.namshi.com/" target="_blank">Namshi</a> where we were a bigger team than I used to work with and Git made total sense. We were also using a revised git flow with lots of branching, merging, rebasing and tagging for releases.</div><div><br /></div><div>Recently I watched a video &#8220;Git happens&#8221; by&nbsp;<a href="http://twitter.com/jessitron" target="_blank">@Jessitron</a>&nbsp;and I refreshed the git concepts. This <a href="http://jessitron.github.io/git-happens/" target="_blank">video</a> is great not only that she is talking about git, also because it&#8217;s not a presentation she uses a whiteboard, markers and some sticky notes to make all the most important git concepts very clear to you. If you are using git I really recommend watching this:</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><iframe allowfullscreen="" frameborder="0" height="281" mozallowfullscreen="" src="//player.vimeo.com/video/46010208?portrait=0" webkitallowfullscreen="" width="500"></iframe><br /></div><div><br />And remember when using Git, its about telling the story of your project, how you and your team decide it will help maintain and informative history of your project.&nbsp;</div><h2 style="text-align: left;">The Tips</h2><div>Some Git tips beyond the basics (commit, pull, push) are as follows:<br /><h3 style="text-align: left;">Diff (what changed?)</h3></div><div>So you are working on a new feature on your branch my-feature, before you commit, you do a git status to list your files, then you need to know what changed in the files you should do <b>git diff</b> on your working directory. It will see all the changes you have made.</div><div><br /></div><pre class="shell" name="code">ᐅ git diff <br /><br />diff --git a/Dockerfile b/Dockerfile<br />index 392e7c0..a0a7c9f 100644<br />--- a/Dockerfile<br />+++ b/Dockerfile<br />@@ -48,6 +48,13 @@ ADD build/sites-enabled/dashboard       /etc/nginx/sites-enabled/dashboard<br /> ADD build/sites-enabled/test.local    /etc/nginx/sites-available/test.local<br /> ADD build/sites-enabled/test.local    /etc/nginx/sites-enabled/test.local<br /> <br />+ADD build/sites-enabled/drupal7.local    /etc/nginx/sites-available/drupal7.local<br />+ADD build/sites-enabled/drupal7.local    /etc/nginx/sites-enabled/drupal7.local<br />+<br />+ADD build/sites-enabled/drupal8.local    /etc/nginx/sites-available/drupal8.local<br />+ADD build/sites-enabled/drupal8.local    /etc/nginx/sites-enabled/drupal8.local<br />+<br />+#phpmyadmin<br /> ADD build/sites-enabled/phpmyadmin    /etc/nginx/sites-available/phpmyadmin<br /> ADD build/sites-enabled/phpmyadmin    /etc/nginx/sites-enabled/phpmyadmin<br /> <br />diff --git a/readme.md b/readme.md<br />index 7ddea6c..4188d66 100644<br />--- a/readme.md<br />+++ b/readme.md<br />@@ -1,6 +1,6 @@<br /> # Docker: Ubuntu, Nginx and PHP Stack<br /> <br />-This is the basis for LEMP stack (minus MySQL). This is based on [phusion/baseimage-docker](https://github.com/phusion/baseimage-docker) base Ubuntu image, which takes care of system issues which Docker's base Ubuntu image does not take care of, such as watching processes, logrotate, ssh server, cron and syslog-ng.<br />+This is the basis for LEMP stack (without MySQL). This is based on [phusion/baseimage-docker](https://github.com/phusion/baseimage-docker) base Ubuntu image, which takes care of system issues which Docker's base Ubuntu image does not take care of, such as watching processes, logrotate, ssh server, cron and syslog-ng.<br /></pre><div><br />You can also use git diff if you have already added the files to the staging area with git add, you will need to use <b>git diff &#8211;cached. </b>Diff can be used to compare branches and commits for example:<br /><br /><pre class="shell" name="code">✹✭ ᐅ <br />git diff master...my-feature<br /><br />diff --git a/Dockerfile b/Dockerfile<br />index 9f9cd77..392e7c0 100644<br />--- a/Dockerfile<br />+++ b/Dockerfile<br />@@ -6,34 +6,115 @@ RUN /etc/my_init.d/00_regen_ssh_host_keys.sh<br /> <br /> CMD ["/sbin/my_init"]<br /> <br />+# install certificates<br />+ADD build/certificates/server.crt /etc/nginx/certificates/<br />+ADD build/certificates/server.key /etc/nginx/certificates/<br />+<br /> # Nginx-PHP Installation<br /> RUN apt-get update<br /> RUN apt-get install -y vim curl wget build-essential python-software-properties<br /> RUN add-apt-repository -y ppa:ondrej/php5<br /> RUN add-apt-repository -y ppa:nginx/stable<br />+<br /> RUN apt-get update<br />+RUN apt-get install -y python-software-properties python python-setuptools ruby rubygems<br /></pre><br />It can be used on github as well, with a URL like:&nbsp;<a href="https://github.com/geshan/angular-presentation/compare/master...more-intro">https://github.com/geshan/angular-presentation/compare/master&#8230;more-intro</a>&nbsp;- so this is comparing master with the more-info branch. The same can be done with commit hashes.<br /><h3 style="text-align: left;">Global Git Ignore</h3><div>If you use an IDE and it creates folders like .settings or .idea and you want to ignore it globally on all git repositories you can do it with global git ignore rather than adding it to each .gitignore file in each repository. You can create a file say <b>global_gitignore </b>on your home directory and list the folders and files you want to be ignored in all git repositories like:</div><div><pre class="shell" name="code">#global git ignore<br />.idea<br />.settings<br /><br />/test.txt<br /></pre></div><div><br /></div>Then run the following command you will have the above git ignore rules applied to all the git repositories:<br /><pre class="shell" name="code">git config --global core.excludesfile ~/.gitignore_global<br /></pre><br />There are a lot of other <a href="http://git-scm.com/book/en/Customizing-Git-Git-Configuration" target="_blank">git configurations</a> you can try and tune git to meet your needs, if you want to look at the current configs applied to your git globally do <b>cat .gitconfig </b>on your home directory.<br /><h3 style="text-align: left;">Stash your work</h3></div><div>You are working on feature-a, an urgent bug say bug-x is discovered and you need to leave what you were doing for feature-a and fix bug-x. What do you do with the changed files in branch feature-a that you were working on, you don&#8217;t wan&#8217;t to commit or push it as its a work in progress. Here comes git stash to your rescue, you can just stash what you were doing on branch feature-a and finish work of bug-x then come back to feature-a branch and pop or apply your stash. How?<br /><br /></div><div><pre class="shell" name="code">✹ ᐅ cd my-project<br />✹ ᐅ git checkout -b feature-a<br /><br /># working on feature-a, some files changed say 3 of them<br /># bug-x discovered, need to fix it urgently so let's stash changes<br /># (save them for later)<br />✹ ᐅ git stash save feature-a<br /><br /># lets go to master and create a new branch to fix bug-x<br />✹ ᐅ git checkout master<br />✹ ᐅ git checkout -b bug-x<br /><br /># work to fix bug x for 1 hr, its fixed now.<br />✹ ᐅ git add .<br />✹ ᐅ git commit -m 'bug-x fixed with change in config files'<br />✹ ᐅ git push origin bug-x<br /><br /># then open a pull request on github for bug-x,<br /># and come back to working on feature-a<br /><br />✹ ᐅ git checkout feature-a<br />✹ ᐅ git stash pop</pre># all your changed files are back and you are at the stage<br /># where you left it before fixing bug-x</div><br />Stash pop will remove the last stash, you can do &nbsp;<b>git stash list </b>to check all your stashes, stashes can be saved without name and can be applied with the hash. Check the <a href="http://git-scm.com/book/en/Git-Tools-Stashing" target="_blank">stashing</a> docs for more information, generally I follow the above flow for staging and prefer not having any stashes in the list.<br /><h3 style="text-align: left;">Squash your commits</h3><div>You did this big feature taking 4 days work and as a good git user you did commits when the code was stable. So now you have 10 commits in total for the feature-b you worked in for 4 days. Do you really want to send a Pull Request with 10 commits, may be along the way you wrote some commits messages that are not so relevant now. So how do you get the 4 commits to become 1, its easy you squash your commits using&nbsp;<b>git reabse -i,</b>&nbsp;how?<br /><br />Now you have 4 commits (shown using <a href="http://git-scm.com/docs/gitk" target="_blank">gitk</a> ) on top of master:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-QhfIl3q029o/U9Xlc_2tD_I/AAAAAAAA0rc/6A0maq6LFKY/s1600/gitk-4-commits.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-QhfIl3q029o/U9Xlc_2tD_I/AAAAAAAA0rc/6A0maq6LFKY/s1600/gitk-4-commits.png" height="522" width="640" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">you need to execute the following command:</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"></div><pre class="shell" name="code">✹ ᐅ git rebase -i HEAD~4 #the last number, here 4 is the no. of commits you want to squash.<br /><br /># you will get a screen like this :<br /><br />pick 8dd81e6 feature-b changes to the config files<br />pick 7ea892d Feature-a fixed class A b and C<br />pick a465749 Feature-b fixed tests<br />pick cd6f406 Feature-b fixed tests<br /><br /><br /># change all picks except of the first one to s. <br /># s is short for squash like below:<br />pick 8dd81e6 feature-b changes to the config files<br />s 7ea892d Feature-a fixed class A b and C<br />s a465749 Feature-b fixed tests<br />s cd6f406 Feature-b fixed tests<br /><br /># now exit your editor, if you are using vim :wq<br /># then as you are squashing commits you can select which commit messages to pick<br /># from a screen like:<br /># This is a combination of 4 commits.<br /># The first commit's message is:<br />feature-b changes to the config files<br /><br /># This is the 2nd commit message:<br /><br />Feature-a fixed class A b and C<br /><br />- [x] Works for A and B<br /><br /># This is the 3rd commit message:<br /><br />Feature-b fixed tests<br /><br />* fixed most test<br /><br /># This is the 4th commit message:<br /><br />Feature-b fixed tests<br /><br />- [x] fixed all tests<br /><br /><br /># Pick the ones that you need or delete, for this example I will not delete anything<br /># and quit the editor<br /><br /># 4 of your commits are squashed into 1.<br /></pre><div class="separator" style="clear: both; text-align: left;"><br /></div>If your commit squash was successful, you will see only 1 commit in place of the 4 on gitk with all commit messages intact, like:<br /><div class="separator" style="clear: both; text-align: center;"></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-JSpIRmrwP6w/U9XncahVmRI/AAAAAAAA0rw/1pZY7m7Kidg/s1600/gitk-4-commts-squashed.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-JSpIRmrwP6w/U9XncahVmRI/AAAAAAAA0rw/1pZY7m7Kidg/s1600/gitk-4-commts-squashed.png" height="640" width="614" /></a></div></div><h2 style="text-align: left;">Conclusion</h2><div>This is just scratching the surface of git there are lots of other things that can be done with git, like <a href="http://git-scm.com/docs/git-cherry-pick" target="_blank">cherry pick</a> commits, list <a href="http://www.commandlinefu.com/commands/view/2345/show-git-branches-by-date-useful-for-showing-active-branches" target="_blank">git branches sorted by created date</a>, <a href="http://webchick.net/node/99" target="_blank">bisect</a> for debugging, you have to know how to <a href="http://githowto.com/resolving_conflicts" target="_blank">fix conflicts</a> with tools like <a href="http://meldmerge.org/" target="_blank">meld</a>&nbsp;etc.<br /><br />Then you have <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks" target="_blank">git hooks</a> which open up a new world of its own like having pre-commit hooks to <a href="http://carlosbuenosvinos.com/write-your-git-hooks-in-php-and-keep-them-under-git-control/" target="_blank">do checks of code and run tests</a>. Git has also been used to version control text related projects like <a href="https://www.gitbook.io/" target="_blank">books</a> not only code. So the possibilities are endless and if you are not using Git you are missing on a lot of things.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Bundles to Get Started With REST in Symfony 2 and Some Tips]]></title>
    <link href="http://geshan.com.np/blog/2014/07/3-bundles-to-get-started-with-rest-in/"/>
    <updated>2014-07-18T16:55:00+10:00</updated>
    <id>http://geshan.com.np/blog/2014/07/3-bundles-to-get-started-with-rest-in</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">&#8220;I found out that you guys just build an amazing mobile app for your e-commerce venture, I heard you are using Symfony 2 for your back-end APIs. How did you make it that fast?&#8221; This is not very different that what I was asked some months back. The answer is we use a <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank">Service Oriented Architecture (SOA) </a>where all back-end service follow the REST architecture to communicate with all the clients. The client can be built in any language as longs a they can do HTTP calls. Lets look at what Symfony 2 bundles you can use to build a similar scalable, fast and cacheable REST APIs.<br /><br />I assume that you have some experience with Symfony 2 including how to use <a href="https://getcomposer.org/doc/00-intro.md" target="_blank">composer</a> to download dependent libraries/bundles.<br /><h2 style="text-align: left;">What is REST</h2>REST, short form for&nbsp;Representational state transfer is a resource based client and server communication protocol which is stateless and cacheable. It is an abstraction over HTTP communication where emphasis is given on uniform interface to make the communication structured and consistent. This <a href="http://www.restapitutorial.com/lessons/whatisrest.html" target="_blank">video</a> describes the constraints of REST and explains what it is or read a simpler <a href="http://rest.elkstein.org/2008/02/what-is-rest.html" target="_blank">one</a>.<!-- more --><br /><br />REST is a lightweight substitute to older ways of doing web services like <a href="http://en.wikipedia.org/wiki/Remote_procedure_call" target="_blank">Remote Procedure Call</a> (RPC) and <a href="http://en.wikipedia.org/wiki/SOAP" target="_blank">Simple Object Access Protocol</a> (SOAP). Basically communication in REST happens in light weight format like JSON which makes it fast.<br /><br />Describing REST involves having knowledge if the HTTP methods (verbs) like GET, POST, PUT, DELETE. Before proceeding further <a href="http://www.restapitutorial.com/lessons/httpmethods.html" target="_blank">knowing</a>&nbsp;what are they used for will be essential. There is also lots of fuss about <a href="http://www.restapitutorial.com/lessons/restfulresourcenaming.html" target="_blank">how to name resources</a> (and corresponding URIs) but rather than doing things by the book making it logical and practical can be the best solution.<br /><br /><h2 style="text-align: left;">RESTing With Symfony 2</h2><div><a href="http://symfony.com/" target="_blank">Symfony</a> is a very loosely coupled framework which has lots of useful components structured in easily plug-able bundles. Here are 3&nbsp;useful public Symfony 2 bundles for your next project using REST with Symfony.</div><h3 style="text-align: left;">FOSRestBundle</h3><div>The <a href="https://packagist.org/packages/FriendsOfSymfony/rest-bundle" target="_blank">FOSRestBundle</a> provides a solid foundation to start building RESTful services in Symfony 2. It can provide with automated routing for resources (probably doctrine entity if you use doctrine). It provides a very good base for a format (JSON/HTML/XML) independent view layer.&nbsp;</div><div><br /></div><div>If you want to be able to encode or decode multiple format <a href="https://github.com/FriendsOfSymfony/FOSRestBundle" target="_blank">FOSRestBundle</a> recommends using <a href="https://github.com/schmittjoh/JMSSerializerBundle" target="_blank">JMSSerializerBundle</a>. The serializer bundle is like glove on the hand with FOSRestBundle to give out response in JSON/HTML/XML. Please go through the <a href="https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> very well and for custom routing you can use Symfony routing and not the one provide by FOSRestBundle. It is one of the most popular bundles in <a href="http://knpbundles.com/best" target="_blank">KNPBundles</a> and has been downloaded more than 784K times.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-dSAVmuiGqgw/U8i7PyW6H6I/AAAAAAAA0ns/w7KSttIS_VE/s1600/fos-rest-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-dSAVmuiGqgw/U8i7PyW6H6I/AAAAAAAA0ns/w7KSttIS_VE/s1600/fos-rest-bundle.png" height="410" width="640" /></a></div><h3 style="text-align: left;">NelmioApiDocBundle</h3><div><a href="https://packagist.org/packages/nelmio/api-doc-bundle" target="_blank">NelmioApiDocBundle</a> is a boon when developing REST web services on Symfony2. The <a href="https://github.com/nelmio/NelmioApiDocBundle" target="_blank">bundle</a> enables clean documentation of all API end points by just using some structured annotation. There are at least 2 amazing benefits using this bundle, first you can give the link to the docs (generally /api/doc) to anyone who wants to implement the REST API you have created. Second while developing you can test your API with the sandbox feature provided by this useful bundle, if you use the annotations correctly linking the involved forms.</div><div><br /></div><div>Restricting sandbox with user access might be a good feature to add on on this bundle. Reading the full <a href="https://github.com/nelmio/NelmioApiDocBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> is highly encouraged. It is also a very popular bundle with 473K downloads till date.</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-dPLuYKdnhWc/U8i9kyXe7cI/AAAAAAAA0n4/kUl3jGfiU3M/s1600/nelmio-api-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-dPLuYKdnhWc/U8i9kyXe7cI/AAAAAAAA0n4/kUl3jGfiU3M/s1600/nelmio-api-bundle.png" height="520" width="640" /></a></div><div><h3>LexikJWTAuthenticationBundle</h3><div>As discussed REST is stateless, so for authentication you have to opt for some mechanism that can be communicate with each request. You can go for something like <a href="http://oauth.net/" target="_blank">Oauth</a>&nbsp;or use JSON Web Signature (JWS). There is already a public bundle the&nbsp;<a href="https://packagist.org/packages/lexik/jwt-authentication-bundle" target="_blank">LexikJWTAuthenticationBundle</a> using the <a href="https://github.com/namshi/jose" target="_blank">JOSE</a> library built at Namshi. It is recommended that you read about JWS and JSON Web Token (JWT) before using this bundle. It can be used by putting the token as a cookie for each request.</div></div><div><br /></div><div>It will enable role based access to your API end points, lets say you want normal users to create users and only admin users to update/delete users that will be easily possible using this <a href="https://github.com/lexik/LexikJWTAuthenticationBundle" target="_blank">bundle</a> than trying to generate a time limited key or some other type of authentication. Yes, reading the <a href="https://github.com/lexik/LexikJWTAuthenticationBundle/blob/master/Resources/doc/index.md" target="_blank">documentation</a> of the bundle will help you achieve the desired output.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-WL-v27TBctg/U8jEeA0dvPI/AAAAAAAA0oM/3n8Smx-h-KQ/s1600/jwt-bundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-WL-v27TBctg/U8jEeA0dvPI/AAAAAAAA0oM/3n8Smx-h-KQ/s1600/jwt-bundle.png" height="342" width="640" /></a></div><br /></div><div><br /></div><div>I hope these modules will come in handy when you start your REST Api with symfony. For more features and to leverage REST to the fullest you can take a look at&nbsp;<a href="https://github.com/willdurand/BazingaHateoasBundle" target="_blank">BazingaHateoasBundle</a>&nbsp;and&nbsp;<a href="https://github.com/hautelook/TemplatedUriBundle" target="_blank">TemplatedUriBundle</a>.</div><h2 style="text-align: left;">Other Tips</h2><div>Some other things you can consider when building a REST based API with Symfony 2 are:</div><div><ol style="text-align: left;"><li>Use the validation groups in Symfony 2 and keep all the validation conditions as annotation in the Entity itself than at multiple places.</li><li>Keep the handing of forms central, though you will not show any HTML forms for the purpose of validation use the Symfony forms on top of the entities and link them to controllers which expose the end points.</li><li>Use the HTTP status code wisely like when a resource is created its not 200 OK its 201 Created, when you are paging results 206 will make for sense and if the user sent bad data 400 Bad Request is better.</li><li>&nbsp;Think how will you version your API early when you develop your API if today you use /api/V1 how will you use api/V2 and what will be its consequences.</li><li>Last but not he least be liberal on what you accept and strict on what you give out.</li></ol><div><blockquote>All in all Symfony is a great framework and doing REST in Symfony though not a piece of cake but is challenging yet rewarding.&nbsp;</blockquote></div></div></div></div>

]]></content>
  </entry>
  
</feed>
